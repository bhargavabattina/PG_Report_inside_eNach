{"uid":"5704e159d596c659","name":"Calculation Testing | Scenario=S16 | Mode=Cash | Slab=1001-5000 | Amount=1200","fullName":"testCases.Calculation_test.TestCalculations#test_calculation_amount","historyId":"81477cd75d476057ead7ad0459703830","time":{"start":1758795037515,"stop":1758795063843,"duration":26328},"status":"broken","statusMessage":"zipfile.BadZipFile: File is not a zip file","statusTrace":"self = <testCases.Calculation_test.TestCalculations object at 0x000002E392F04050>\npage_with_screenshot = <Page url='https://payoffline.sabpaisa.in/challan/views/genericChallans.jsp;jsessionid=392F203CE3214171E676FD9CA8B4D205'>\nscenario = 'S16', payment_mode = 'Cash', slab = '1001-5000', amount = 1200\nexcel_client_code = 'DJ050', excel_environment = 'STAGING'\nensure_db_updated = None\n\n    @allure.story(\"Cancel Transaction Button Check\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.ui\n    @pytest.mark.regression\n    def test_calculation_amount(self, page_with_screenshot, scenario, payment_mode, slab, amount, excel_client_code,\n                                excel_environment, ensure_db_updated):\n        logger = LogGen.loggen(\"Calculation\")\n        \"\"\"Test the cancel transaction button functionality.\"\"\"\n        timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n        allure.dynamic.title(\n            f\"Calculation Testing | Scenario={scenario} | Mode={payment_mode} | Slab={slab} | Amount={amount}\"\n        )\n        logger.info(f\"--- Starting calculation Test for {scenario} | {payment_mode} | {slab} | {amount} ---\")\n    \n        bill_amount = conv_charges = total_amount = txn_id = \"N/A\"\n        status = \"Fail\"\n    \n        try:\n            if payment_mode == \"UPI INTENT\":\n                viewport_size = {\"width\": 375, \"height\": 667}  # Example: iPhone-like dimensions\n                page_with_screenshot.set_viewport_size(viewport_size)\n                logger.info(\n                    f\"Set viewport size to {viewport_size['width']}x{viewport_size['height']} for UPI INTENT mode\")\n                allure.attach(page_with_screenshot.screenshot(), name=\"UPI Intent Initial Viewport\",\n                              attachment_type=allure.attachment_type.PNG)\n    \n    \n            # Initialize page objects\n            client = ClientPage(page_with_screenshot)\n            client_details = ClientDetailsPage(page_with_screenshot)\n            pg = PaymentGatewayPage(page_with_screenshot)\n            pg_response = PaymentGatewayResponsePage(page_with_screenshot)\n    \n            # Fill and verify client and payer details\n            fill_and_verify_client_details(self.logger, client, client_details, excel_client_code, excel_environment)\n            fill_payer_details(\n                logger, client_details, ReadConfig.get_payer_first_name(),\n                ReadConfig.get_payer_last_name(), str(amount), ReadConfig.get_payer_phone(),\n                ReadConfig.get_payer_email()\n            )\n    \n            # Get transaction ID\n            with allure.step(f\"Accessing the Client_txn_id\"):\n                txn_id = client_details.get_value(\"_client_transaction_id\")\n                allure.attach(txn_id, name=f\"Client Transaction ID for {excel_client_code}\",\n                              attachment_type=allure.attachment_type.TEXT)\n    \n            # Click Pay button\n            with allure.step(\"Clicking Pay Button\"):\n                logger.info(\"Clicking Pay button\")\n                client_details.click(\"_pay_btn\")\n    \n            time.sleep(5)\n    \n            # Handle payment mode and get amounts\n            bill_amount, conv_charges, total_amount = self._handle_payment_mode(pg, payment_mode, logger)\n    \n    \n            #time.sleep(10)\n    \n            # Handle failure for specific scenario and slab\n            # if scenario in [\"S8\", \"S13\", \"S16\", \"S24\", \"S21\"] and slab == \"5001-10000\":\n            #     status = \"Fail\"\n            #     with allure.step(\"transaction is aborted for scenario and slab\"):\n            #         allure.attach(\n            #             f\"Scenario={scenario}, Slab={slab} is restricted → marking as Fail\",\n            #             name=\"Failure\",\n            #             attachment_type=allure.attachment_type.TEXT\n            #         )\n            #     pytest.fail(f\"Scenario={scenario}, Slab={slab} →  test as failed \")\n    \n            # \uD83D\uDD39 Call the Payment Aborted check here\n            status = self._check_payment_aborted(page_with_screenshot)\n    \n    \n    \n            # # Wait for page to load and validate URL\n            # time.sleep(5)\n            # pg_response.page.wait_for_load_state(\"networkidle\")\n            # current_url = pg_response.get_current_url()\n            # self.logger.info(f\"URL after proceed to pay: {current_url}\")\n            #\n            # with allure.step(\"Validating the Base URL\"):\n            #     assert validate_base_url(current_url,\n            #                              excel_environment), f\"Base URL validation failed for {current_url}\"\n    \n    \n    \n    \n    \n        except Exception as e:\n            self.logger.exception(\n                f\"Exception occurred during Cancel Transaction Test for {excel_client_code}: {str(e)}\")\n            allure.attach(str(e), name=\"Exception Details\", attachment_type=allure.attachment_type.TEXT)\n            raise\n    \n        finally:\n            # Update Excel with results\n>           update_excel_results(\n                scenario=scenario,\n                payment_mode=payment_mode,\n                slab=slab,\n                request_amount=amount,\n                actual_bill=bill_amount,\n                conv_charges=conv_charges,\n                total_amount=total_amount,\n                status=status,\n                txn_id=txn_id\n            )\n\ntestCases\\Calculation_test.py:259: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutilites\\calculation_excel_helper.py:15: in update_excel_results\n    df = pd.read_excel(file_path)\n.venv\\Lib\\site-packages\\pandas\\io\\excel\\_base.py:495: in read_excel\n    io = ExcelFile(\n.venv\\Lib\\site-packages\\pandas\\io\\excel\\_base.py:1567: in __init__\n    self._reader = self._engines[engine](\n.venv\\Lib\\site-packages\\pandas\\io\\excel\\_openpyxl.py:553: in __init__\n    super().__init__(\n.venv\\Lib\\site-packages\\pandas\\io\\excel\\_base.py:573: in __init__\n    self.book = self.load_workbook(self.handles.handle, engine_kwargs)\n.venv\\Lib\\site-packages\\pandas\\io\\excel\\_openpyxl.py:572: in load_workbook\n    return load_workbook(\n.venv\\Lib\\site-packages\\openpyxl\\reader\\excel.py:346: in load_workbook\n    reader = ExcelReader(filename, read_only, keep_vba,\n.venv\\Lib\\site-packages\\openpyxl\\reader\\excel.py:123: in __init__\n    self.archive = _validate_archive(fn)\n.venv\\Lib\\site-packages\\openpyxl\\reader\\excel.py:95: in _validate_archive\n    archive = ZipFile(filename, 'r')\nC:\\Python313\\Lib\\zipfile\\__init__.py:1380: in __init__\n    self._RealGetContents()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <zipfile.ZipFile [closed]>\n\n    def _RealGetContents(self):\n        \"\"\"Read in the table of contents for the ZIP file.\"\"\"\n        fp = self.fp\n        try:\n            endrec = _EndRecData(fp)\n        except OSError:\n            raise BadZipFile(\"File is not a zip file\")\n        if not endrec:\n>           raise BadZipFile(\"File is not a zip file\")\nE           zipfile.BadZipFile: File is not a zip file\n\nC:\\Python313\\Lib\\zipfile\\__init__.py:1447: BadZipFile","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"attach_test_timestamp","time":{"start":1758795018661,"stop":1758795018671,"duration":10},"status":"passed","steps":[],"attachments":[{"uid":"53251fe0592e3572","name":"Test Execution Timestamp","source":"53251fe0592e3572.txt","type":"text/plain","size":19}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"browser","time":{"start":1758795018671,"stop":1758795023334,"duration":4663},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"page","time":{"start":1758795023334,"stop":1758795031966,"duration":8632},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"page_with_screenshot","time":{"start":1758795031966,"stop":1758795031966,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"ensure_db_updated","time":{"start":1758795031967,"stop":1758795037513,"duration":5546},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"zipfile.BadZipFile: File is not a zip file","statusTrace":"self = <testCases.Calculation_test.TestCalculations object at 0x000002E392F04050>\npage_with_screenshot = <Page url='https://payoffline.sabpaisa.in/challan/views/genericChallans.jsp;jsessionid=392F203CE3214171E676FD9CA8B4D205'>\nscenario = 'S16', payment_mode = 'Cash', slab = '1001-5000', amount = 1200\nexcel_client_code = 'DJ050', excel_environment = 'STAGING'\nensure_db_updated = None\n\n    @allure.story(\"Cancel Transaction Button Check\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.ui\n    @pytest.mark.regression\n    def test_calculation_amount(self, page_with_screenshot, scenario, payment_mode, slab, amount, excel_client_code,\n                                excel_environment, ensure_db_updated):\n        logger = LogGen.loggen(\"Calculation\")\n        \"\"\"Test the cancel transaction button functionality.\"\"\"\n        timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n        allure.dynamic.title(\n            f\"Calculation Testing | Scenario={scenario} | Mode={payment_mode} | Slab={slab} | Amount={amount}\"\n        )\n        logger.info(f\"--- Starting calculation Test for {scenario} | {payment_mode} | {slab} | {amount} ---\")\n    \n        bill_amount = conv_charges = total_amount = txn_id = \"N/A\"\n        status = \"Fail\"\n    \n        try:\n            if payment_mode == \"UPI INTENT\":\n                viewport_size = {\"width\": 375, \"height\": 667}  # Example: iPhone-like dimensions\n                page_with_screenshot.set_viewport_size(viewport_size)\n                logger.info(\n                    f\"Set viewport size to {viewport_size['width']}x{viewport_size['height']} for UPI INTENT mode\")\n                allure.attach(page_with_screenshot.screenshot(), name=\"UPI Intent Initial Viewport\",\n                              attachment_type=allure.attachment_type.PNG)\n    \n    \n            # Initialize page objects\n            client = ClientPage(page_with_screenshot)\n            client_details = ClientDetailsPage(page_with_screenshot)\n            pg = PaymentGatewayPage(page_with_screenshot)\n            pg_response = PaymentGatewayResponsePage(page_with_screenshot)\n    \n            # Fill and verify client and payer details\n            fill_and_verify_client_details(self.logger, client, client_details, excel_client_code, excel_environment)\n            fill_payer_details(\n                logger, client_details, ReadConfig.get_payer_first_name(),\n                ReadConfig.get_payer_last_name(), str(amount), ReadConfig.get_payer_phone(),\n                ReadConfig.get_payer_email()\n            )\n    \n            # Get transaction ID\n            with allure.step(f\"Accessing the Client_txn_id\"):\n                txn_id = client_details.get_value(\"_client_transaction_id\")\n                allure.attach(txn_id, name=f\"Client Transaction ID for {excel_client_code}\",\n                              attachment_type=allure.attachment_type.TEXT)\n    \n            # Click Pay button\n            with allure.step(\"Clicking Pay Button\"):\n                logger.info(\"Clicking Pay button\")\n                client_details.click(\"_pay_btn\")\n    \n            time.sleep(5)\n    \n            # Handle payment mode and get amounts\n            bill_amount, conv_charges, total_amount = self._handle_payment_mode(pg, payment_mode, logger)\n    \n    \n            #time.sleep(10)\n    \n            # Handle failure for specific scenario and slab\n            # if scenario in [\"S8\", \"S13\", \"S16\", \"S24\", \"S21\"] and slab == \"5001-10000\":\n            #     status = \"Fail\"\n            #     with allure.step(\"transaction is aborted for scenario and slab\"):\n            #         allure.attach(\n            #             f\"Scenario={scenario}, Slab={slab} is restricted → marking as Fail\",\n            #             name=\"Failure\",\n            #             attachment_type=allure.attachment_type.TEXT\n            #         )\n            #     pytest.fail(f\"Scenario={scenario}, Slab={slab} →  test as failed \")\n    \n            # \uD83D\uDD39 Call the Payment Aborted check here\n            status = self._check_payment_aborted(page_with_screenshot)\n    \n    \n    \n            # # Wait for page to load and validate URL\n            # time.sleep(5)\n            # pg_response.page.wait_for_load_state(\"networkidle\")\n            # current_url = pg_response.get_current_url()\n            # self.logger.info(f\"URL after proceed to pay: {current_url}\")\n            #\n            # with allure.step(\"Validating the Base URL\"):\n            #     assert validate_base_url(current_url,\n            #                              excel_environment), f\"Base URL validation failed for {current_url}\"\n    \n    \n    \n    \n    \n        except Exception as e:\n            self.logger.exception(\n                f\"Exception occurred during Cancel Transaction Test for {excel_client_code}: {str(e)}\")\n            allure.attach(str(e), name=\"Exception Details\", attachment_type=allure.attachment_type.TEXT)\n            raise\n    \n        finally:\n            # Update Excel with results\n>           update_excel_results(\n                scenario=scenario,\n                payment_mode=payment_mode,\n                slab=slab,\n                request_amount=amount,\n                actual_bill=bill_amount,\n                conv_charges=conv_charges,\n                total_amount=total_amount,\n                status=status,\n                txn_id=txn_id\n            )\n\ntestCases\\Calculation_test.py:259: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutilites\\calculation_excel_helper.py:15: in update_excel_results\n    df = pd.read_excel(file_path)\n.venv\\Lib\\site-packages\\pandas\\io\\excel\\_base.py:495: in read_excel\n    io = ExcelFile(\n.venv\\Lib\\site-packages\\pandas\\io\\excel\\_base.py:1567: in __init__\n    self._reader = self._engines[engine](\n.venv\\Lib\\site-packages\\pandas\\io\\excel\\_openpyxl.py:553: in __init__\n    super().__init__(\n.venv\\Lib\\site-packages\\pandas\\io\\excel\\_base.py:573: in __init__\n    self.book = self.load_workbook(self.handles.handle, engine_kwargs)\n.venv\\Lib\\site-packages\\pandas\\io\\excel\\_openpyxl.py:572: in load_workbook\n    return load_workbook(\n.venv\\Lib\\site-packages\\openpyxl\\reader\\excel.py:346: in load_workbook\n    reader = ExcelReader(filename, read_only, keep_vba,\n.venv\\Lib\\site-packages\\openpyxl\\reader\\excel.py:123: in __init__\n    self.archive = _validate_archive(fn)\n.venv\\Lib\\site-packages\\openpyxl\\reader\\excel.py:95: in _validate_archive\n    archive = ZipFile(filename, 'r')\nC:\\Python313\\Lib\\zipfile\\__init__.py:1380: in __init__\n    self._RealGetContents()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <zipfile.ZipFile [closed]>\n\n    def _RealGetContents(self):\n        \"\"\"Read in the table of contents for the ZIP file.\"\"\"\n        fp = self.fp\n        try:\n            endrec = _EndRecData(fp)\n        except OSError:\n            raise BadZipFile(\"File is not a zip file\")\n        if not endrec:\n>           raise BadZipFile(\"File is not a zip file\")\nE           zipfile.BadZipFile: File is not a zip file\n\nC:\\Python313\\Lib\\zipfile\\__init__.py:1447: BadZipFile","steps":[{"name":"Filling and verifying client details","time":{"start":1758795037518,"stop":1758795037940,"duration":422},"status":"passed","steps":[{"name":"Filling Client Code : DJ050","time":{"start":1758795037518,"stop":1758795037623,"duration":105},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Selecting Environment : STAGING","time":{"start":1758795037623,"stop":1758795037664,"duration":41},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Clicking Show Detail","time":{"start":1758795037664,"stop":1758795037871,"duration":207},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Verifying if Payer Name is visible","time":{"start":1758795037871,"stop":1758795037940,"duration":69},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"logger","value":"<RootLogger root (DEBUG)>"},{"name":"client","value":"<pageObjects.client_page.ClientPage object at 0x000002E392E40830>"},{"name":"client_details","value":"<pageObjects.client_details_page.ClientDetailsPage object at 0x000002E393279FD0>"},{"name":"client_code","value":"'DJ050'"},{"name":"environment","value":"'STAGING'"}],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":4,"hasContent":true,"attachmentStep":false},{"name":"Filling payer details","time":{"start":1758795037940,"stop":1758795038251,"duration":311},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"logger","value":"<RootLogger root (DEBUG)>"},{"name":"client_details","value":"<pageObjects.client_details_page.ClientDetailsPage object at 0x000002E393279FD0>"},{"name":"firstname","value":"'Bhargava'"},{"name":"lastname","value":"'Battina'"},{"name":"amount","value":"'1200'"},{"name":"mobilenumber","value":"'1234567890'"},{"name":"email","value":"'test@sabpaisa.in'"}],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Accessing the Client_txn_id","time":{"start":1758795038251,"stop":1758795038304,"duration":53},"status":"passed","steps":[],"attachments":[{"uid":"fbbf539ff434c2ad","name":"Client Transaction ID for DJ050","source":"fbbf539ff434c2ad.txt","type":"text/plain","size":22}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Clicking Pay Button","time":{"start":1758795038304,"stop":1758795039238,"duration":934},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Payment Aborted message not found → Test Passed","time":{"start":1758795062295,"stop":1758795062299,"duration":4},"status":"passed","steps":[],"attachments":[{"uid":"b6090d6a7c3a734c","name":"Success Reason","source":"b6090d6a7c3a734c.txt","type":"text/plain","size":35}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":2,"stepsCount":9,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"ensure_db_updated::0","time":{"start":1758795065811,"stop":1758795065811,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"page_with_screenshot::0","time":{"start":1758795065840,"stop":1758795068731,"duration":2891},"status":"passed","steps":[],"attachments":[{"uid":"992d7001b0368e99","name":"Screenshot","source":"992d7001b0368e99.png","type":"image/png","size":43635},{"uid":"fe12e8a13501f9dc","name":"Test Video","source":"fe12e8a13501f9dc.webm","type":"video/webm","size":842065}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":2,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"page::0","time":{"start":1758795068735,"stop":1758795068735,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"browser::0","time":{"start":1758795068737,"stop":1758795068766,"duration":29},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"story","value":"Cancel Transaction Button Check"},{"name":"severity","value":"critical"},{"name":"epic","value":"Payment Gateway"},{"name":"tag","value":"regression"},{"name":"tag","value":"ui"},{"name":"parentSuite","value":"testCases"},{"name":"suite","value":"Calculation_test"},{"name":"subSuite","value":"TestCalculations"},{"name":"host","value":"SRS-CL-009"},{"name":"thread","value":"11584-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testCases.Calculation_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"amount","value":"1200"},{"name":"excel_client_code","value":"'DJ050'"},{"name":"excel_environment","value":"'STAGING'"},{"name":"payment_mode","value":"'Cash'"},{"name":"scenario","value":"'S16'"},{"name":"slab","value":"'1001-5000'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["ui","regression"]},"source":"5704e159d596c659.json","parameterValues":["1200","'DJ050'","'STAGING'","'Cash'","'S16'","'1001-5000'"]}
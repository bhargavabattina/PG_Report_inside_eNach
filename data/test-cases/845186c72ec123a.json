{"uid":"845186c72ec123a","name":"Calculation Testing | Scenario=S17 | Mode=RuPay Card | Slab=5001-10000 | Amount=6000","fullName":"testCases.Calculation_test.TestCalculations#test_calculation_amount","historyId":"3e9463d235654f82cecafa0d1e914ddd","time":{"start":1758800713153,"stop":1758800757425,"duration":44272},"status":"broken","statusMessage":"zipfile.BadZipFile: Bad CRC-32 for file 'docProps/core.xml'","statusTrace":"self = <testCases.Calculation_test.TestCalculations object at 0x000001CB506B59D0>\npage_with_screenshot = <Page url='https://securetest.sabpaisa.in/ClientTest/payLinkVersion'>\nscenario = 'S17', payment_mode = 'RuPay Card', slab = '5001-10000'\namount = 6000, excel_client_code = 'DJ050', excel_environment = 'STAGING'\nensure_db_updated = None\n\n    @allure.story(\"Cancel Transaction Button Check\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.ui\n    @pytest.mark.regression\n    def test_calculation_amount(self, page_with_screenshot, scenario, payment_mode, slab, amount, excel_client_code,\n                                excel_environment, ensure_db_updated):\n        logger = LogGen.loggen(\"Calculation\")\n        \"\"\"Test the cancel transaction button functionality.\"\"\"\n        timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n        allure.dynamic.title(\n            f\"Calculation Testing | Scenario={scenario} | Mode={payment_mode} | Slab={slab} | Amount={amount}\"\n        )\n        logger.info(f\"--- Starting calculation Test for {scenario} | {payment_mode} | {slab} | {amount} ---\")\n    \n        bill_amount = conv_charges = total_amount = txn_id = \"N/A\"\n        status = \"Fail\"\n    \n        try:\n            if payment_mode == \"UPI INTENT\":\n                viewport_size = {\"width\": 375, \"height\": 667}  # Example: iPhone-like dimensions\n                page_with_screenshot.set_viewport_size(viewport_size)\n                logger.info(\n                    f\"Set viewport size to {viewport_size['width']}x{viewport_size['height']} for UPI INTENT mode\")\n                allure.attach(page_with_screenshot.screenshot(), name=\"UPI Intent Initial Viewport\",\n                              attachment_type=allure.attachment_type.PNG)\n    \n    \n            # Initialize page objects\n            client = ClientPage(page_with_screenshot)\n            client_details = ClientDetailsPage(page_with_screenshot)\n            pg = PaymentGatewayPage(page_with_screenshot)\n            pg_response = PaymentGatewayResponsePage(page_with_screenshot)\n    \n            # Fill and verify client and payer details\n            fill_and_verify_client_details(self.logger, client, client_details, excel_client_code, excel_environment)\n            fill_payer_details(\n                logger, client_details, ReadConfig.get_payer_first_name(),\n                ReadConfig.get_payer_last_name(), str(amount), ReadConfig.get_payer_phone(),\n                ReadConfig.get_payer_email()\n            )\n    \n            # Get transaction ID\n            with allure.step(f\"Accessing the Client_txn_id\"):\n                txn_id = client_details.get_value(\"_client_transaction_id\")\n                allure.attach(txn_id, name=f\"Client Transaction ID for {excel_client_code}\",\n                              attachment_type=allure.attachment_type.TEXT)\n    \n            # Click Pay button\n            with allure.step(\"Clicking Pay Button\"):\n                logger.info(\"Clicking Pay button\")\n                client_details.click(\"_pay_btn\")\n    \n            time.sleep(5)\n    \n            # Handle payment mode and get amounts\n>           bill_amount, conv_charges, total_amount = self._handle_payment_mode(pg, payment_mode, logger)\n\ntestCases\\Calculation_test.py:216: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntestCases\\Calculation_test.py:59: in _handle_payment_mode\n    pg.select_payment_mode(\"_payment_mode\", pm_data[\"type\"])\npageObjects\\base_page.py:52: in select_payment_mode\n    modes.first.wait_for(state=\"visible\")\n.venv\\Lib\\site-packages\\playwright\\sync_api\\_generated.py:17736: in wait_for\n    self._sync(self._impl_obj.wait_for(timeout=timeout, state=state))\n.venv\\Lib\\site-packages\\playwright\\_impl\\_locator.py:670: in wait_for\n    await self._frame.wait_for_selector(\n.venv\\Lib\\site-packages\\playwright\\_impl\\_frame.py:323: in wait_for_selector\n    await self._channel.send(\"waitForSelector\", locals_to_params(locals()))\n.venv\\Lib\\site-packages\\playwright\\_impl\\_connection.py:59: in send\n    return await self._connection.wrap_api_call(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <playwright._impl._connection.Connection object at 0x000001CB50CC4B90>\ncb = <function Channel.send.<locals>.<lambda> at 0x000001CB50D31080>\nis_internal = False\n\n    async def wrap_api_call(\n        self, cb: Callable[[], Any], is_internal: bool = False\n    ) -> Any:\n        if self._api_zone.get():\n            return await cb()\n        task = asyncio.current_task(self._loop)\n        st: List[inspect.FrameInfo] = getattr(task, \"__pw_stack__\", inspect.stack())\n        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal)\n        self._api_zone.set(parsed_st)\n        try:\n            return await cb()\n        except Exception as error:\n>           raise rewrite_error(error, f\"{parsed_st['apiName']}: {error}\") from None\nE           playwright._impl._errors.TimeoutError: Locator.wait_for: Timeout 30000ms exceeded.\nE           Call log:\nE           waiting for locator(\"p.title\").first to be visible\n\n.venv\\Lib\\site-packages\\playwright\\_impl\\_connection.py:520: TimeoutError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testCases.Calculation_test.TestCalculations object at 0x000001CB506B59D0>\npage_with_screenshot = <Page url='https://securetest.sabpaisa.in/ClientTest/payLinkVersion'>\nscenario = 'S17', payment_mode = 'RuPay Card', slab = '5001-10000'\namount = 6000, excel_client_code = 'DJ050', excel_environment = 'STAGING'\nensure_db_updated = None\n\n    @allure.story(\"Cancel Transaction Button Check\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.ui\n    @pytest.mark.regression\n    def test_calculation_amount(self, page_with_screenshot, scenario, payment_mode, slab, amount, excel_client_code,\n                                excel_environment, ensure_db_updated):\n        logger = LogGen.loggen(\"Calculation\")\n        \"\"\"Test the cancel transaction button functionality.\"\"\"\n        timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n        allure.dynamic.title(\n            f\"Calculation Testing | Scenario={scenario} | Mode={payment_mode} | Slab={slab} | Amount={amount}\"\n        )\n        logger.info(f\"--- Starting calculation Test for {scenario} | {payment_mode} | {slab} | {amount} ---\")\n    \n        bill_amount = conv_charges = total_amount = txn_id = \"N/A\"\n        status = \"Fail\"\n    \n        try:\n            if payment_mode == \"UPI INTENT\":\n                viewport_size = {\"width\": 375, \"height\": 667}  # Example: iPhone-like dimensions\n                page_with_screenshot.set_viewport_size(viewport_size)\n                logger.info(\n                    f\"Set viewport size to {viewport_size['width']}x{viewport_size['height']} for UPI INTENT mode\")\n                allure.attach(page_with_screenshot.screenshot(), name=\"UPI Intent Initial Viewport\",\n                              attachment_type=allure.attachment_type.PNG)\n    \n    \n            # Initialize page objects\n            client = ClientPage(page_with_screenshot)\n            client_details = ClientDetailsPage(page_with_screenshot)\n            pg = PaymentGatewayPage(page_with_screenshot)\n            pg_response = PaymentGatewayResponsePage(page_with_screenshot)\n    \n            # Fill and verify client and payer details\n            fill_and_verify_client_details(self.logger, client, client_details, excel_client_code, excel_environment)\n            fill_payer_details(\n                logger, client_details, ReadConfig.get_payer_first_name(),\n                ReadConfig.get_payer_last_name(), str(amount), ReadConfig.get_payer_phone(),\n                ReadConfig.get_payer_email()\n            )\n    \n            # Get transaction ID\n            with allure.step(f\"Accessing the Client_txn_id\"):\n                txn_id = client_details.get_value(\"_client_transaction_id\")\n                allure.attach(txn_id, name=f\"Client Transaction ID for {excel_client_code}\",\n                              attachment_type=allure.attachment_type.TEXT)\n    \n            # Click Pay button\n            with allure.step(\"Clicking Pay Button\"):\n                logger.info(\"Clicking Pay button\")\n                client_details.click(\"_pay_btn\")\n    \n            time.sleep(5)\n    \n            # Handle payment mode and get amounts\n            bill_amount, conv_charges, total_amount = self._handle_payment_mode(pg, payment_mode, logger)\n    \n    \n            #time.sleep(10)\n    \n            # Handle failure for specific scenario and slab\n            # if scenario in [\"S8\", \"S13\", \"S16\", \"S24\", \"S21\"] and slab == \"5001-10000\":\n            #     status = \"Fail\"\n            #     with allure.step(\"transaction is aborted for scenario and slab\"):\n            #         allure.attach(\n            #             f\"Scenario={scenario}, Slab={slab} is restricted → marking as Fail\",\n            #             name=\"Failure\",\n            #             attachment_type=allure.attachment_type.TEXT\n            #         )\n            #     pytest.fail(f\"Scenario={scenario}, Slab={slab} →  test as failed \")\n    \n            # \uD83D\uDD39 Call the Payment Aborted check here\n            status = self._check_payment_aborted(page_with_screenshot)\n    \n    \n    \n            # # Wait for page to load and validate URL\n            # time.sleep(5)\n            # pg_response.page.wait_for_load_state(\"networkidle\")\n            # current_url = pg_response.get_current_url()\n            # self.logger.info(f\"URL after proceed to pay: {current_url}\")\n            #\n            # with allure.step(\"Validating the Base URL\"):\n            #     assert validate_base_url(current_url,\n            #                              excel_environment), f\"Base URL validation failed for {current_url}\"\n    \n    \n    \n    \n    \n        except Exception as e:\n            self.logger.exception(\n                f\"Exception occurred during Cancel Transaction Test for {excel_client_code}: {str(e)}\")\n            allure.attach(str(e), name=\"Exception Details\", attachment_type=allure.attachment_type.TEXT)\n            raise\n    \n        finally:\n            # Update Excel with results\n>           update_excel_results(\n                scenario=scenario,\n                payment_mode=payment_mode,\n                slab=slab,\n                request_amount=amount,\n                actual_bill=bill_amount,\n                conv_charges=conv_charges,\n                total_amount=total_amount,\n                status=status,\n                txn_id=txn_id\n            )\n\ntestCases\\Calculation_test.py:259: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutilites\\calculation_excel_helper.py:15: in update_excel_results\n    df = pd.read_excel(file_path)\n.venv\\Lib\\site-packages\\pandas\\io\\excel\\_base.py:495: in read_excel\n    io = ExcelFile(\n.venv\\Lib\\site-packages\\pandas\\io\\excel\\_base.py:1567: in __init__\n    self._reader = self._engines[engine](\n.venv\\Lib\\site-packages\\pandas\\io\\excel\\_openpyxl.py:553: in __init__\n    super().__init__(\n.venv\\Lib\\site-packages\\pandas\\io\\excel\\_base.py:573: in __init__\n    self.book = self.load_workbook(self.handles.handle, engine_kwargs)\n.venv\\Lib\\site-packages\\pandas\\io\\excel\\_openpyxl.py:572: in load_workbook\n    return load_workbook(\n.venv\\Lib\\site-packages\\openpyxl\\reader\\excel.py:348: in load_workbook\n    reader.read()\n.venv\\Lib\\site-packages\\openpyxl\\reader\\excel.py:295: in read\n    self.read_properties()\n.venv\\Lib\\site-packages\\openpyxl\\reader\\excel.py:175: in read_properties\n    src = fromstring(self.archive.read(ARC_CORE))\nC:\\Python313\\Lib\\zipfile\\__init__.py:1599: in read\n    return fp.read()\nC:\\Python313\\Lib\\zipfile\\__init__.py:998: in read\n    buf += self._read1(self.MAX_N)\nC:\\Python313\\Lib\\zipfile\\__init__.py:1102: in _read1\n    self._update_crc(data)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <zipfile.ZipExtFile [closed]>\nnewdata = b'<cp:coreProperties xmlns:cp=\"http://schemas.openxmlformats.org/package/2006/metadata/core-properties\" xmlns:dc=\"http...cterms:created><dcterms:modified xsi:type=\"dcterms:W3CDTF\">2025-09-25T11:43:45Z</dcterms:modified></cp:coreProperties>'\n\n    def _update_crc(self, newdata):\n        # Update the CRC using the given data.\n        if self._expected_crc is None:\n            # No need to compute the CRC if we don't have a reference value\n            return\n        self._running_crc = crc32(newdata, self._running_crc)\n        # Check the CRC if we're at the end of the file\n        if self._eof and self._running_crc != self._expected_crc:\n>           raise BadZipFile(\"Bad CRC-32 for file %r\" % self.name)\nE           zipfile.BadZipFile: Bad CRC-32 for file 'docProps/core.xml'\n\nC:\\Python313\\Lib\\zipfile\\__init__.py:1030: BadZipFile","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"attach_test_timestamp","time":{"start":1758800664629,"stop":1758800664683,"duration":54},"status":"passed","steps":[],"attachments":[{"uid":"c63b6baf8cb6fd81","name":"Test Execution Timestamp","source":"c63b6baf8cb6fd81.txt","type":"text/plain","size":19}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"browser","time":{"start":1758800664685,"stop":1758800699336,"duration":34651},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"page","time":{"start":1758800699336,"stop":1758800713146,"duration":13810},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"page_with_screenshot","time":{"start":1758800713146,"stop":1758800713146,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"ensure_db_updated","time":{"start":1758800713148,"stop":1758800713152,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"zipfile.BadZipFile: Bad CRC-32 for file 'docProps/core.xml'","statusTrace":"self = <testCases.Calculation_test.TestCalculations object at 0x000001CB506B59D0>\npage_with_screenshot = <Page url='https://securetest.sabpaisa.in/ClientTest/payLinkVersion'>\nscenario = 'S17', payment_mode = 'RuPay Card', slab = '5001-10000'\namount = 6000, excel_client_code = 'DJ050', excel_environment = 'STAGING'\nensure_db_updated = None\n\n    @allure.story(\"Cancel Transaction Button Check\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.ui\n    @pytest.mark.regression\n    def test_calculation_amount(self, page_with_screenshot, scenario, payment_mode, slab, amount, excel_client_code,\n                                excel_environment, ensure_db_updated):\n        logger = LogGen.loggen(\"Calculation\")\n        \"\"\"Test the cancel transaction button functionality.\"\"\"\n        timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n        allure.dynamic.title(\n            f\"Calculation Testing | Scenario={scenario} | Mode={payment_mode} | Slab={slab} | Amount={amount}\"\n        )\n        logger.info(f\"--- Starting calculation Test for {scenario} | {payment_mode} | {slab} | {amount} ---\")\n    \n        bill_amount = conv_charges = total_amount = txn_id = \"N/A\"\n        status = \"Fail\"\n    \n        try:\n            if payment_mode == \"UPI INTENT\":\n                viewport_size = {\"width\": 375, \"height\": 667}  # Example: iPhone-like dimensions\n                page_with_screenshot.set_viewport_size(viewport_size)\n                logger.info(\n                    f\"Set viewport size to {viewport_size['width']}x{viewport_size['height']} for UPI INTENT mode\")\n                allure.attach(page_with_screenshot.screenshot(), name=\"UPI Intent Initial Viewport\",\n                              attachment_type=allure.attachment_type.PNG)\n    \n    \n            # Initialize page objects\n            client = ClientPage(page_with_screenshot)\n            client_details = ClientDetailsPage(page_with_screenshot)\n            pg = PaymentGatewayPage(page_with_screenshot)\n            pg_response = PaymentGatewayResponsePage(page_with_screenshot)\n    \n            # Fill and verify client and payer details\n            fill_and_verify_client_details(self.logger, client, client_details, excel_client_code, excel_environment)\n            fill_payer_details(\n                logger, client_details, ReadConfig.get_payer_first_name(),\n                ReadConfig.get_payer_last_name(), str(amount), ReadConfig.get_payer_phone(),\n                ReadConfig.get_payer_email()\n            )\n    \n            # Get transaction ID\n            with allure.step(f\"Accessing the Client_txn_id\"):\n                txn_id = client_details.get_value(\"_client_transaction_id\")\n                allure.attach(txn_id, name=f\"Client Transaction ID for {excel_client_code}\",\n                              attachment_type=allure.attachment_type.TEXT)\n    \n            # Click Pay button\n            with allure.step(\"Clicking Pay Button\"):\n                logger.info(\"Clicking Pay button\")\n                client_details.click(\"_pay_btn\")\n    \n            time.sleep(5)\n    \n            # Handle payment mode and get amounts\n>           bill_amount, conv_charges, total_amount = self._handle_payment_mode(pg, payment_mode, logger)\n\ntestCases\\Calculation_test.py:216: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntestCases\\Calculation_test.py:59: in _handle_payment_mode\n    pg.select_payment_mode(\"_payment_mode\", pm_data[\"type\"])\npageObjects\\base_page.py:52: in select_payment_mode\n    modes.first.wait_for(state=\"visible\")\n.venv\\Lib\\site-packages\\playwright\\sync_api\\_generated.py:17736: in wait_for\n    self._sync(self._impl_obj.wait_for(timeout=timeout, state=state))\n.venv\\Lib\\site-packages\\playwright\\_impl\\_locator.py:670: in wait_for\n    await self._frame.wait_for_selector(\n.venv\\Lib\\site-packages\\playwright\\_impl\\_frame.py:323: in wait_for_selector\n    await self._channel.send(\"waitForSelector\", locals_to_params(locals()))\n.venv\\Lib\\site-packages\\playwright\\_impl\\_connection.py:59: in send\n    return await self._connection.wrap_api_call(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <playwright._impl._connection.Connection object at 0x000001CB50CC4B90>\ncb = <function Channel.send.<locals>.<lambda> at 0x000001CB50D31080>\nis_internal = False\n\n    async def wrap_api_call(\n        self, cb: Callable[[], Any], is_internal: bool = False\n    ) -> Any:\n        if self._api_zone.get():\n            return await cb()\n        task = asyncio.current_task(self._loop)\n        st: List[inspect.FrameInfo] = getattr(task, \"__pw_stack__\", inspect.stack())\n        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal)\n        self._api_zone.set(parsed_st)\n        try:\n            return await cb()\n        except Exception as error:\n>           raise rewrite_error(error, f\"{parsed_st['apiName']}: {error}\") from None\nE           playwright._impl._errors.TimeoutError: Locator.wait_for: Timeout 30000ms exceeded.\nE           Call log:\nE           waiting for locator(\"p.title\").first to be visible\n\n.venv\\Lib\\site-packages\\playwright\\_impl\\_connection.py:520: TimeoutError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testCases.Calculation_test.TestCalculations object at 0x000001CB506B59D0>\npage_with_screenshot = <Page url='https://securetest.sabpaisa.in/ClientTest/payLinkVersion'>\nscenario = 'S17', payment_mode = 'RuPay Card', slab = '5001-10000'\namount = 6000, excel_client_code = 'DJ050', excel_environment = 'STAGING'\nensure_db_updated = None\n\n    @allure.story(\"Cancel Transaction Button Check\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.ui\n    @pytest.mark.regression\n    def test_calculation_amount(self, page_with_screenshot, scenario, payment_mode, slab, amount, excel_client_code,\n                                excel_environment, ensure_db_updated):\n        logger = LogGen.loggen(\"Calculation\")\n        \"\"\"Test the cancel transaction button functionality.\"\"\"\n        timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n        allure.dynamic.title(\n            f\"Calculation Testing | Scenario={scenario} | Mode={payment_mode} | Slab={slab} | Amount={amount}\"\n        )\n        logger.info(f\"--- Starting calculation Test for {scenario} | {payment_mode} | {slab} | {amount} ---\")\n    \n        bill_amount = conv_charges = total_amount = txn_id = \"N/A\"\n        status = \"Fail\"\n    \n        try:\n            if payment_mode == \"UPI INTENT\":\n                viewport_size = {\"width\": 375, \"height\": 667}  # Example: iPhone-like dimensions\n                page_with_screenshot.set_viewport_size(viewport_size)\n                logger.info(\n                    f\"Set viewport size to {viewport_size['width']}x{viewport_size['height']} for UPI INTENT mode\")\n                allure.attach(page_with_screenshot.screenshot(), name=\"UPI Intent Initial Viewport\",\n                              attachment_type=allure.attachment_type.PNG)\n    \n    \n            # Initialize page objects\n            client = ClientPage(page_with_screenshot)\n            client_details = ClientDetailsPage(page_with_screenshot)\n            pg = PaymentGatewayPage(page_with_screenshot)\n            pg_response = PaymentGatewayResponsePage(page_with_screenshot)\n    \n            # Fill and verify client and payer details\n            fill_and_verify_client_details(self.logger, client, client_details, excel_client_code, excel_environment)\n            fill_payer_details(\n                logger, client_details, ReadConfig.get_payer_first_name(),\n                ReadConfig.get_payer_last_name(), str(amount), ReadConfig.get_payer_phone(),\n                ReadConfig.get_payer_email()\n            )\n    \n            # Get transaction ID\n            with allure.step(f\"Accessing the Client_txn_id\"):\n                txn_id = client_details.get_value(\"_client_transaction_id\")\n                allure.attach(txn_id, name=f\"Client Transaction ID for {excel_client_code}\",\n                              attachment_type=allure.attachment_type.TEXT)\n    \n            # Click Pay button\n            with allure.step(\"Clicking Pay Button\"):\n                logger.info(\"Clicking Pay button\")\n                client_details.click(\"_pay_btn\")\n    \n            time.sleep(5)\n    \n            # Handle payment mode and get amounts\n            bill_amount, conv_charges, total_amount = self._handle_payment_mode(pg, payment_mode, logger)\n    \n    \n            #time.sleep(10)\n    \n            # Handle failure for specific scenario and slab\n            # if scenario in [\"S8\", \"S13\", \"S16\", \"S24\", \"S21\"] and slab == \"5001-10000\":\n            #     status = \"Fail\"\n            #     with allure.step(\"transaction is aborted for scenario and slab\"):\n            #         allure.attach(\n            #             f\"Scenario={scenario}, Slab={slab} is restricted → marking as Fail\",\n            #             name=\"Failure\",\n            #             attachment_type=allure.attachment_type.TEXT\n            #         )\n            #     pytest.fail(f\"Scenario={scenario}, Slab={slab} →  test as failed \")\n    \n            # \uD83D\uDD39 Call the Payment Aborted check here\n            status = self._check_payment_aborted(page_with_screenshot)\n    \n    \n    \n            # # Wait for page to load and validate URL\n            # time.sleep(5)\n            # pg_response.page.wait_for_load_state(\"networkidle\")\n            # current_url = pg_response.get_current_url()\n            # self.logger.info(f\"URL after proceed to pay: {current_url}\")\n            #\n            # with allure.step(\"Validating the Base URL\"):\n            #     assert validate_base_url(current_url,\n            #                              excel_environment), f\"Base URL validation failed for {current_url}\"\n    \n    \n    \n    \n    \n        except Exception as e:\n            self.logger.exception(\n                f\"Exception occurred during Cancel Transaction Test for {excel_client_code}: {str(e)}\")\n            allure.attach(str(e), name=\"Exception Details\", attachment_type=allure.attachment_type.TEXT)\n            raise\n    \n        finally:\n            # Update Excel with results\n>           update_excel_results(\n                scenario=scenario,\n                payment_mode=payment_mode,\n                slab=slab,\n                request_amount=amount,\n                actual_bill=bill_amount,\n                conv_charges=conv_charges,\n                total_amount=total_amount,\n                status=status,\n                txn_id=txn_id\n            )\n\ntestCases\\Calculation_test.py:259: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutilites\\calculation_excel_helper.py:15: in update_excel_results\n    df = pd.read_excel(file_path)\n.venv\\Lib\\site-packages\\pandas\\io\\excel\\_base.py:495: in read_excel\n    io = ExcelFile(\n.venv\\Lib\\site-packages\\pandas\\io\\excel\\_base.py:1567: in __init__\n    self._reader = self._engines[engine](\n.venv\\Lib\\site-packages\\pandas\\io\\excel\\_openpyxl.py:553: in __init__\n    super().__init__(\n.venv\\Lib\\site-packages\\pandas\\io\\excel\\_base.py:573: in __init__\n    self.book = self.load_workbook(self.handles.handle, engine_kwargs)\n.venv\\Lib\\site-packages\\pandas\\io\\excel\\_openpyxl.py:572: in load_workbook\n    return load_workbook(\n.venv\\Lib\\site-packages\\openpyxl\\reader\\excel.py:348: in load_workbook\n    reader.read()\n.venv\\Lib\\site-packages\\openpyxl\\reader\\excel.py:295: in read\n    self.read_properties()\n.venv\\Lib\\site-packages\\openpyxl\\reader\\excel.py:175: in read_properties\n    src = fromstring(self.archive.read(ARC_CORE))\nC:\\Python313\\Lib\\zipfile\\__init__.py:1599: in read\n    return fp.read()\nC:\\Python313\\Lib\\zipfile\\__init__.py:998: in read\n    buf += self._read1(self.MAX_N)\nC:\\Python313\\Lib\\zipfile\\__init__.py:1102: in _read1\n    self._update_crc(data)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <zipfile.ZipExtFile [closed]>\nnewdata = b'<cp:coreProperties xmlns:cp=\"http://schemas.openxmlformats.org/package/2006/metadata/core-properties\" xmlns:dc=\"http...cterms:created><dcterms:modified xsi:type=\"dcterms:W3CDTF\">2025-09-25T11:43:45Z</dcterms:modified></cp:coreProperties>'\n\n    def _update_crc(self, newdata):\n        # Update the CRC using the given data.\n        if self._expected_crc is None:\n            # No need to compute the CRC if we don't have a reference value\n            return\n        self._running_crc = crc32(newdata, self._running_crc)\n        # Check the CRC if we're at the end of the file\n        if self._eof and self._running_crc != self._expected_crc:\n>           raise BadZipFile(\"Bad CRC-32 for file %r\" % self.name)\nE           zipfile.BadZipFile: Bad CRC-32 for file 'docProps/core.xml'\n\nC:\\Python313\\Lib\\zipfile\\__init__.py:1030: BadZipFile","steps":[{"name":"Filling and verifying client details","time":{"start":1758800713160,"stop":1758800714349,"duration":1189},"status":"passed","steps":[{"name":"Filling Client Code : DJ050","time":{"start":1758800713160,"stop":1758800713546,"duration":386},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Selecting Environment : STAGING","time":{"start":1758800713546,"stop":1758800713622,"duration":76},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Clicking Show Detail","time":{"start":1758800713623,"stop":1758800713889,"duration":266},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Verifying if Payer Name is visible","time":{"start":1758800713890,"stop":1758800714349,"duration":459},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"logger","value":"<RootLogger root (DEBUG)>"},{"name":"client","value":"<pageObjects.client_page.ClientPage object at 0x000001CB5108CE10>"},{"name":"client_details","value":"<pageObjects.client_details_page.ClientDetailsPage object at 0x000001CB5108CF50>"},{"name":"client_code","value":"'DJ050'"},{"name":"environment","value":"'STAGING'"}],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":4,"hasContent":true,"attachmentStep":false},{"name":"Filling payer details","time":{"start":1758800714350,"stop":1758800715664,"duration":1314},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"logger","value":"<RootLogger root (DEBUG)>"},{"name":"client_details","value":"<pageObjects.client_details_page.ClientDetailsPage object at 0x000001CB5108CF50>"},{"name":"firstname","value":"'Bhargava'"},{"name":"lastname","value":"'Battina'"},{"name":"amount","value":"'6000'"},{"name":"mobilenumber","value":"'1234567890'"},{"name":"email","value":"'test@sabpaisa.in'"}],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Accessing the Client_txn_id","time":{"start":1758800715664,"stop":1758800717037,"duration":1373},"status":"passed","steps":[],"attachments":[{"uid":"174c173e90effd2d","name":"Client Transaction ID for DJ050","source":"174c173e90effd2d.txt","type":"text/plain","size":22}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Clicking Pay Button","time":{"start":1758800717037,"stop":1758800717924,"duration":887},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[{"uid":"24ae72b14f285f07","name":"Exception Details","source":"24ae72b14f285f07.txt","type":"text/plain","size":105},{"uid":"cc347ff205faeadf","name":"log","source":"cc347ff205faeadf.txt","type":"text/plain","size":77}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":3,"stepsCount":8,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"ensure_db_updated::0","time":{"start":1758800763967,"stop":1758800763967,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"page_with_screenshot::0","time":{"start":1758800771542,"stop":1758800822152,"duration":50610},"status":"passed","steps":[],"attachments":[{"uid":"45ca7b85eee1ebc1","name":"Screenshot","source":"45ca7b85eee1ebc1.png","type":"image/png","size":4331},{"uid":"b2b9e04851ac96ef","name":"Test Video","source":"b2b9e04851ac96ef.webm","type":"video/webm","size":0}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":2,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"page::0","time":{"start":1758800822155,"stop":1758800822155,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"browser::0","time":{"start":1758800822159,"stop":1758800822452,"duration":293},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"story","value":"Cancel Transaction Button Check"},{"name":"severity","value":"critical"},{"name":"epic","value":"Payment Gateway"},{"name":"tag","value":"regression"},{"name":"tag","value":"ui"},{"name":"parentSuite","value":"testCases"},{"name":"suite","value":"Calculation_test"},{"name":"subSuite","value":"TestCalculations"},{"name":"host","value":"SRS-CL-009"},{"name":"thread","value":"77452-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testCases.Calculation_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"amount","value":"6000"},{"name":"excel_client_code","value":"'DJ050'"},{"name":"excel_environment","value":"'STAGING'"},{"name":"payment_mode","value":"'RuPay Card'"},{"name":"scenario","value":"'S17'"},{"name":"slab","value":"'5001-10000'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["ui","regression"]},"source":"845186c72ec123a.json","parameterValues":["6000","'DJ050'","'STAGING'","'RuPay Card'","'S17'","'5001-10000'"]}
{"uid":"1caf8e1b2ba28bab","name":"Calculation Testing | Scenario=S1 | Mode=RTGS | Slab=1001-5000 | Amount=1200","fullName":"testCases.Calculation_test.TestCalculations#test_calculation_amount","historyId":"697075b91f1bd17dc982d56041a6184d","time":{"start":1758776520832,"stop":1758776528765,"duration":7933},"description":"Test the cancel transaction button functionality.","descriptionHtml":"<p>Test the cancel transaction button functionality.</p>\n","status":"broken","statusMessage":"ValueError: Unknown Cash Mode: E-RTGS","statusTrace":"self = <testCases.Calculation_test.TestCalculations object at 0x00000126DC079FE0>, page_with_screenshot = <Page url='https://stage-securepay.sabpaisa.in/SabPaisa/sabPaisaInit?v=1'>\nscenario = 'S1', payment_mode = 'RTGS', slab = '1001-5000', amount = 1200, excel_client_code = 'DJ050', excel_environment = 'STAGING', ensure_db_updated = None\n\n    @allure.story(\"Cancel Transaction Button Check\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.ui\n    @pytest.mark.regression\n    def test_calculation_amount(self, page_with_screenshot, scenario, payment_mode, slab, amount, excel_client_code,\n                                excel_environment, ensure_db_updated):\n        \"\"\"Test the cancel transaction button functionality.\"\"\"\n        timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n        allure.dynamic.title(\n            f\"Calculation Testing | Scenario={scenario} | Mode={payment_mode} | Slab={slab} | Amount={amount}\"\n        )\n        self.logger.info(f\"--- Starting calculation Test for {scenario} | {payment_mode} | {slab} | {amount} ---\")\n    \n        bill_amount = conv_charges = total_amount = txn_id = \"N/A\"\n        status = \"Fail\"\n    \n        try:\n            if payment_mode == \"UPI INTENT\":\n                viewport_size = {\"width\": 375, \"height\": 667}  # Example: iPhone-like dimensions\n                page_with_screenshot.set_viewport_size(viewport_size)\n                self.logger.info(\n                    f\"Set viewport size to {viewport_size['width']}x{viewport_size['height']} for UPI INTENT mode\")\n                allure.attach(page_with_screenshot.screenshot(), name=\"UPI Intent Initial Viewport\",\n                              attachment_type=allure.attachment_type.PNG)\n    \n    \n            # Initialize page objects\n            client = ClientPage(page_with_screenshot)\n            client_details = ClientDetailsPage(page_with_screenshot)\n            pg = PaymentGatewayPage(page_with_screenshot)\n            pg_response = PaymentGatewayResponsePage(page_with_screenshot)\n    \n            # Fill and verify client and payer details\n            fill_and_verify_client_details(self.logger, client, client_details, excel_client_code, excel_environment)\n            fill_payer_details(\n                self.logger, client_details, ReadConfig.get_payer_first_name(),\n                ReadConfig.get_payer_last_name(), str(amount), ReadConfig.get_payer_phone(),\n                ReadConfig.get_payer_email()\n            )\n    \n            # Get transaction ID\n            with allure.step(f\"Accessing the Client_txn_id\"):\n                txn_id = client_details.get_value(\"_client_transaction_id\")\n                allure.attach(txn_id, name=f\"Client Transaction ID for {excel_client_code}\",\n                              attachment_type=allure.attachment_type.TEXT)\n    \n            # Click Pay button\n            with allure.step(\"Clicking Pay Button\"):\n                self.logger.info(\"Clicking Pay button\")\n                client_details.click(\"_pay_btn\")\n    \n            time.sleep(5)\n    \n            # Handle payment mode and get amounts\n>           bill_amount, conv_charges, total_amount = self._handle_payment_mode(pg, payment_mode, self.logger)\n\ntestCases\\Calculation_test.py:215: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <testCases.Calculation_test.TestCalculations object at 0x00000126DC079FE0>, pg = <pageObjects.payment_gateway_page.PaymentGatewayPage object at 0x00000126DC1C28B0>\npayment_mode = 'RTGS', logger = <RootLogger root (DEBUG)>\n\n    def _handle_payment_mode(self, pg, payment_mode, logger):\n        \"\"\"Handle payment mode-specific logic.\"\"\"\n    \n        bill_amount = conv_charges = total_amount = \"N/A\"\n        pm_data = self.PAYMENT_MODE_MAPPING.get(payment_mode)\n        if not pm_data:\n            raise ValueError(f\"Unsupported Payment Mode: {payment_mode}\")\n    \n        pg.select_payment_mode(\"_payment_mode\", pm_data[\"type\"])\n    \n    \n        if pm_data[\"type\"] == PaymentMode.CARD:\n            pg.fill(\"_pg_card_number\", os.getenv(f\"{pm_data['env_prefix']}_CARD_NUMBER\"))\n            time.sleep(2)\n            pg.fill(\"_pg_card_holder_name\", os.getenv(f\"{pm_data['env_prefix']}_CARD_NAME\"))\n            pg.fill(\"_pg_card_exp_date\", os.getenv(f\"{pm_data['env_prefix']}_CARD_EXPIRY\"))\n            pg.fill(\"_pg_card_cvv\", os.getenv(f\"{pm_data['env_prefix']}_CARD_CVV\"))\n            bill_amount, conv_charges, total_amount = self._get_amounts(pg, logger)\n            pg.click(\"_procced_button\")\n    \n        elif pm_data[\"type\"] == PaymentMode.UPI:\n            pg.fill(\"_pg_upi_id\", os.getenv(f\"{pm_data['env_prefix']}_VPA\"))\n            try:\n                pg.click(\"_pg_upi_verify\")\n            except Exception as e:\n                logger.error(f\"Failed to verify UPI ID: {str(e)}\")\n            time.sleep(2)\n            bill_amount, conv_charges, total_amount = self._get_amounts(pg, logger)\n            pg.click(\"_pg_qr_button\")\n    \n        elif pm_data[\"type\"] == PaymentMode.WALLET:\n            pg.select_mode(\"_pg_wallet_list\", WalletMode.AMAZON_PAY.value)\n            bill_amount, conv_charges, total_amount = self._get_amounts(pg, logger)\n            pg.click(\"_procced_button_submit\")\n    \n        elif pm_data[\"type\"] == PaymentMode.INTENT:\n            pg.click(\"_pg_intent_app\")\n            bill_amount, conv_charges, total_amount = self._get_amounts(pg, logger)\n            pg.click(\"_procced_button_submit\")\n    \n        if pm_data[\"type\"] == PaymentMode.CASH_OTHER:\n    \n            logger.info(f\"Handling CASH_OTHER mode with env_prefix: {pm_data['env_prefix']}\")\n    \n            pg.select_mode(\"_pg_cash_list\", pm_data[\"env_prefix\"])\n    \n    \n    \n            pg.click(\"_pg_cash_dropdown\")\n    \n    \n    \n            if pm_data[\"env_prefix\"] == CashMode.CASH.value:\n    \n                pg.select_mode(\"_pg_cash_bank\", CashBank.INDIAN_BANK.value)\n    \n            elif pm_data[\"env_prefix\"] == CashMode.NEFT.value:\n    \n                pg.click(\"_pg_neft_bank\")\n    \n            elif pm_data[\"env_prefix\"] == CashMode.RTGS.value:\n    \n                pg.click(\"_pg_rtgs_bank\")\n    \n            else:\n    \n                logger.error(f\"Unknown cash mode env_prefix: {pm_data['env_prefix']}\")\n    \n>               raise ValueError(f\"Unknown Cash Mode: {pm_data['env_prefix']}\")\nE               ValueError: Unknown Cash Mode: E-RTGS\n\ntestCases\\Calculation_test.py:119: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"attach_test_timestamp","time":{"start":1758776516587,"stop":1758776516591,"duration":4},"status":"passed","steps":[],"attachments":[{"uid":"8de0e185605a5342","name":"Test Execution Timestamp","source":"8de0e185605a5342.txt","type":"text/plain","size":19}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"browser","time":{"start":1758776516591,"stop":1758776518086,"duration":1495},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"page","time":{"start":1758776518086,"stop":1758776520816,"duration":2730},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"page_with_screenshot","time":{"start":1758776520816,"stop":1758776520816,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"ensure_db_updated","time":{"start":1758776520817,"stop":1758776520831,"duration":14},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Test the cancel transaction button functionality.","status":"broken","statusMessage":"ValueError: Unknown Cash Mode: E-RTGS","statusTrace":"self = <testCases.Calculation_test.TestCalculations object at 0x00000126DC079FE0>, page_with_screenshot = <Page url='https://stage-securepay.sabpaisa.in/SabPaisa/sabPaisaInit?v=1'>\nscenario = 'S1', payment_mode = 'RTGS', slab = '1001-5000', amount = 1200, excel_client_code = 'DJ050', excel_environment = 'STAGING', ensure_db_updated = None\n\n    @allure.story(\"Cancel Transaction Button Check\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.ui\n    @pytest.mark.regression\n    def test_calculation_amount(self, page_with_screenshot, scenario, payment_mode, slab, amount, excel_client_code,\n                                excel_environment, ensure_db_updated):\n        \"\"\"Test the cancel transaction button functionality.\"\"\"\n        timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n        allure.dynamic.title(\n            f\"Calculation Testing | Scenario={scenario} | Mode={payment_mode} | Slab={slab} | Amount={amount}\"\n        )\n        self.logger.info(f\"--- Starting calculation Test for {scenario} | {payment_mode} | {slab} | {amount} ---\")\n    \n        bill_amount = conv_charges = total_amount = txn_id = \"N/A\"\n        status = \"Fail\"\n    \n        try:\n            if payment_mode == \"UPI INTENT\":\n                viewport_size = {\"width\": 375, \"height\": 667}  # Example: iPhone-like dimensions\n                page_with_screenshot.set_viewport_size(viewport_size)\n                self.logger.info(\n                    f\"Set viewport size to {viewport_size['width']}x{viewport_size['height']} for UPI INTENT mode\")\n                allure.attach(page_with_screenshot.screenshot(), name=\"UPI Intent Initial Viewport\",\n                              attachment_type=allure.attachment_type.PNG)\n    \n    \n            # Initialize page objects\n            client = ClientPage(page_with_screenshot)\n            client_details = ClientDetailsPage(page_with_screenshot)\n            pg = PaymentGatewayPage(page_with_screenshot)\n            pg_response = PaymentGatewayResponsePage(page_with_screenshot)\n    \n            # Fill and verify client and payer details\n            fill_and_verify_client_details(self.logger, client, client_details, excel_client_code, excel_environment)\n            fill_payer_details(\n                self.logger, client_details, ReadConfig.get_payer_first_name(),\n                ReadConfig.get_payer_last_name(), str(amount), ReadConfig.get_payer_phone(),\n                ReadConfig.get_payer_email()\n            )\n    \n            # Get transaction ID\n            with allure.step(f\"Accessing the Client_txn_id\"):\n                txn_id = client_details.get_value(\"_client_transaction_id\")\n                allure.attach(txn_id, name=f\"Client Transaction ID for {excel_client_code}\",\n                              attachment_type=allure.attachment_type.TEXT)\n    \n            # Click Pay button\n            with allure.step(\"Clicking Pay Button\"):\n                self.logger.info(\"Clicking Pay button\")\n                client_details.click(\"_pay_btn\")\n    \n            time.sleep(5)\n    \n            # Handle payment mode and get amounts\n>           bill_amount, conv_charges, total_amount = self._handle_payment_mode(pg, payment_mode, self.logger)\n\ntestCases\\Calculation_test.py:215: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <testCases.Calculation_test.TestCalculations object at 0x00000126DC079FE0>, pg = <pageObjects.payment_gateway_page.PaymentGatewayPage object at 0x00000126DC1C28B0>\npayment_mode = 'RTGS', logger = <RootLogger root (DEBUG)>\n\n    def _handle_payment_mode(self, pg, payment_mode, logger):\n        \"\"\"Handle payment mode-specific logic.\"\"\"\n    \n        bill_amount = conv_charges = total_amount = \"N/A\"\n        pm_data = self.PAYMENT_MODE_MAPPING.get(payment_mode)\n        if not pm_data:\n            raise ValueError(f\"Unsupported Payment Mode: {payment_mode}\")\n    \n        pg.select_payment_mode(\"_payment_mode\", pm_data[\"type\"])\n    \n    \n        if pm_data[\"type\"] == PaymentMode.CARD:\n            pg.fill(\"_pg_card_number\", os.getenv(f\"{pm_data['env_prefix']}_CARD_NUMBER\"))\n            time.sleep(2)\n            pg.fill(\"_pg_card_holder_name\", os.getenv(f\"{pm_data['env_prefix']}_CARD_NAME\"))\n            pg.fill(\"_pg_card_exp_date\", os.getenv(f\"{pm_data['env_prefix']}_CARD_EXPIRY\"))\n            pg.fill(\"_pg_card_cvv\", os.getenv(f\"{pm_data['env_prefix']}_CARD_CVV\"))\n            bill_amount, conv_charges, total_amount = self._get_amounts(pg, logger)\n            pg.click(\"_procced_button\")\n    \n        elif pm_data[\"type\"] == PaymentMode.UPI:\n            pg.fill(\"_pg_upi_id\", os.getenv(f\"{pm_data['env_prefix']}_VPA\"))\n            try:\n                pg.click(\"_pg_upi_verify\")\n            except Exception as e:\n                logger.error(f\"Failed to verify UPI ID: {str(e)}\")\n            time.sleep(2)\n            bill_amount, conv_charges, total_amount = self._get_amounts(pg, logger)\n            pg.click(\"_pg_qr_button\")\n    \n        elif pm_data[\"type\"] == PaymentMode.WALLET:\n            pg.select_mode(\"_pg_wallet_list\", WalletMode.AMAZON_PAY.value)\n            bill_amount, conv_charges, total_amount = self._get_amounts(pg, logger)\n            pg.click(\"_procced_button_submit\")\n    \n        elif pm_data[\"type\"] == PaymentMode.INTENT:\n            pg.click(\"_pg_intent_app\")\n            bill_amount, conv_charges, total_amount = self._get_amounts(pg, logger)\n            pg.click(\"_procced_button_submit\")\n    \n        if pm_data[\"type\"] == PaymentMode.CASH_OTHER:\n    \n            logger.info(f\"Handling CASH_OTHER mode with env_prefix: {pm_data['env_prefix']}\")\n    \n            pg.select_mode(\"_pg_cash_list\", pm_data[\"env_prefix\"])\n    \n    \n    \n            pg.click(\"_pg_cash_dropdown\")\n    \n    \n    \n            if pm_data[\"env_prefix\"] == CashMode.CASH.value:\n    \n                pg.select_mode(\"_pg_cash_bank\", CashBank.INDIAN_BANK.value)\n    \n            elif pm_data[\"env_prefix\"] == CashMode.NEFT.value:\n    \n                pg.click(\"_pg_neft_bank\")\n    \n            elif pm_data[\"env_prefix\"] == CashMode.RTGS.value:\n    \n                pg.click(\"_pg_rtgs_bank\")\n    \n            else:\n    \n                logger.error(f\"Unknown cash mode env_prefix: {pm_data['env_prefix']}\")\n    \n>               raise ValueError(f\"Unknown Cash Mode: {pm_data['env_prefix']}\")\nE               ValueError: Unknown Cash Mode: E-RTGS\n\ntestCases\\Calculation_test.py:119: ValueError","steps":[{"name":"Filling and verifying client details","time":{"start":1758776520833,"stop":1758776522320,"duration":1487},"status":"passed","steps":[{"name":"Filling Client Code : DJ050","time":{"start":1758776520833,"stop":1758776521801,"duration":968},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Selecting Environment : STAGING","time":{"start":1758776521801,"stop":1758776521884,"duration":83},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Clicking Show Detail","time":{"start":1758776521884,"stop":1758776522221,"duration":337},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Verifying if Payer Name is visible","time":{"start":1758776522221,"stop":1758776522320,"duration":99},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"logger","value":"<RootLogger root (DEBUG)>"},{"name":"client","value":"<pageObjects.client_page.ClientPage object at 0x00000126DD20D320>"},{"name":"client_details","value":"<pageObjects.client_details_page.ClientDetailsPage object at 0x00000126DD100910>"},{"name":"client_code","value":"'DJ050'"},{"name":"environment","value":"'STAGING'"}],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":4,"hasContent":true,"attachmentStep":false},{"name":"Filling payer details","time":{"start":1758776522320,"stop":1758776522626,"duration":306},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"logger","value":"<RootLogger root (DEBUG)>"},{"name":"client_details","value":"<pageObjects.client_details_page.ClientDetailsPage object at 0x00000126DD100910>"},{"name":"firstname","value":"'Bhargava'"},{"name":"lastname","value":"'Battina'"},{"name":"amount","value":"'1200'"},{"name":"mobilenumber","value":"'1234567890'"},{"name":"email","value":"'test@sabpaisa.in'"}],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Accessing the Client_txn_id","time":{"start":1758776522627,"stop":1758776522706,"duration":79},"status":"passed","steps":[],"attachments":[{"uid":"c4855827991fe8d6","name":"Client Transaction ID for DJ050","source":"c4855827991fe8d6.txt","type":"text/plain","size":22}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Clicking Pay Button","time":{"start":1758776522706,"stop":1758776523018,"duration":312},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[{"uid":"ee6c5165ff64c301","name":"Exception Details","source":"ee6c5165ff64c301.txt","type":"text/plain","size":25},{"uid":"95bd136dd6615ac2","name":"log","source":"95bd136dd6615ac2.txt","type":"text/plain","size":1494}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":3,"stepsCount":8,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"ensure_db_updated::0","time":{"start":1758776528785,"stop":1758776528785,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"page_with_screenshot::0","time":{"start":1758776528804,"stop":1758776531224,"duration":2420},"status":"passed","steps":[],"attachments":[{"uid":"8a78a9d1195d53fd","name":"Screenshot","source":"8a78a9d1195d53fd.png","type":"image/png","size":86048},{"uid":"ae352670eae28819","name":"Test Video","source":"ae352670eae28819.webm","type":"video/webm","size":315556}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":2,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"page::0","time":{"start":1758776531226,"stop":1758776531226,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"browser::0","time":{"start":1758776531229,"stop":1758776531246,"duration":17},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"story","value":"Cancel Transaction Button Check"},{"name":"epic","value":"Payment Gateway"},{"name":"severity","value":"critical"},{"name":"tag","value":"regression"},{"name":"tag","value":"ui"},{"name":"parentSuite","value":"testCases"},{"name":"suite","value":"Calculation_test"},{"name":"subSuite","value":"TestCalculations"},{"name":"host","value":"SRS-CL-009"},{"name":"thread","value":"79924-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testCases.Calculation_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"amount","value":"1200"},{"name":"excel_client_code","value":"'DJ050'"},{"name":"excel_environment","value":"'STAGING'"},{"name":"payment_mode","value":"'RTGS'"},{"name":"scenario","value":"'S1'"},{"name":"slab","value":"'1001-5000'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["ui","regression"]},"source":"1caf8e1b2ba28bab.json","parameterValues":["1200","'DJ050'","'STAGING'","'RTGS'","'S1'","'1001-5000'"]}
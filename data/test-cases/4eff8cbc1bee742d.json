{"uid":"4eff8cbc1bee742d","name":"Calculation Testing | Scenario=S18 | Mode=RuPay Credit Card | Slab=1-1000 | Amount=100","fullName":"testCases.Calculation_test.TestCalculations#test_calculation_amount","historyId":"cce9439d7139af36db00e7a49e77043b","time":{"start":1758800442786,"stop":1758800471475,"duration":28689},"status":"broken","statusMessage":"ValueError: Excel file format cannot be determined, you must specify an engine manually.","statusTrace":"self = <testCases.Calculation_test.TestCalculations object at 0x0000014B8F094320>\npage_with_screenshot = <Page url='https://stage-securepay.sabpaisa.in/SabPaisa/sabPaisaInit?v=1'>\nscenario = 'S18', payment_mode = 'RuPay Credit Card', slab = '1-1000'\namount = 100, excel_client_code = 'DJ050', excel_environment = 'STAGING'\nensure_db_updated = None\n\n    @allure.story(\"Cancel Transaction Button Check\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.ui\n    @pytest.mark.regression\n    def test_calculation_amount(self, page_with_screenshot, scenario, payment_mode, slab, amount, excel_client_code,\n                                excel_environment, ensure_db_updated):\n        logger = LogGen.loggen(\"Calculation\")\n        \"\"\"Test the cancel transaction button functionality.\"\"\"\n        timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n        allure.dynamic.title(\n            f\"Calculation Testing | Scenario={scenario} | Mode={payment_mode} | Slab={slab} | Amount={amount}\"\n        )\n        logger.info(f\"--- Starting calculation Test for {scenario} | {payment_mode} | {slab} | {amount} ---\")\n    \n        bill_amount = conv_charges = total_amount = txn_id = \"N/A\"\n        status = \"Fail\"\n    \n        try:\n            if payment_mode == \"UPI INTENT\":\n                viewport_size = {\"width\": 375, \"height\": 667}  # Example: iPhone-like dimensions\n                page_with_screenshot.set_viewport_size(viewport_size)\n                logger.info(\n                    f\"Set viewport size to {viewport_size['width']}x{viewport_size['height']} for UPI INTENT mode\")\n                allure.attach(page_with_screenshot.screenshot(), name=\"UPI Intent Initial Viewport\",\n                              attachment_type=allure.attachment_type.PNG)\n    \n    \n            # Initialize page objects\n            client = ClientPage(page_with_screenshot)\n            client_details = ClientDetailsPage(page_with_screenshot)\n            pg = PaymentGatewayPage(page_with_screenshot)\n            pg_response = PaymentGatewayResponsePage(page_with_screenshot)\n    \n            # Fill and verify client and payer details\n            fill_and_verify_client_details(self.logger, client, client_details, excel_client_code, excel_environment)\n            fill_payer_details(\n                logger, client_details, ReadConfig.get_payer_first_name(),\n                ReadConfig.get_payer_last_name(), str(amount), ReadConfig.get_payer_phone(),\n                ReadConfig.get_payer_email()\n            )\n    \n            # Get transaction ID\n            with allure.step(f\"Accessing the Client_txn_id\"):\n                txn_id = client_details.get_value(\"_client_transaction_id\")\n                allure.attach(txn_id, name=f\"Client Transaction ID for {excel_client_code}\",\n                              attachment_type=allure.attachment_type.TEXT)\n    \n            # Click Pay button\n            with allure.step(\"Clicking Pay Button\"):\n                logger.info(\"Clicking Pay button\")\n                client_details.click(\"_pay_btn\")\n    \n            time.sleep(5)\n    \n            # Handle payment mode and get amounts\n            bill_amount, conv_charges, total_amount = self._handle_payment_mode(pg, payment_mode, logger)\n    \n    \n            #time.sleep(10)\n    \n            # Handle failure for specific scenario and slab\n            # if scenario in [\"S8\", \"S13\", \"S16\", \"S24\", \"S21\"] and slab == \"5001-10000\":\n            #     status = \"Fail\"\n            #     with allure.step(\"transaction is aborted for scenario and slab\"):\n            #         allure.attach(\n            #             f\"Scenario={scenario}, Slab={slab} is restricted → marking as Fail\",\n            #             name=\"Failure\",\n            #             attachment_type=allure.attachment_type.TEXT\n            #         )\n            #     pytest.fail(f\"Scenario={scenario}, Slab={slab} →  test as failed \")\n    \n            # \uD83D\uDD39 Call the Payment Aborted check here\n            status = self._check_payment_aborted(page_with_screenshot)\n    \n    \n    \n            # # Wait for page to load and validate URL\n            # time.sleep(5)\n            # pg_response.page.wait_for_load_state(\"networkidle\")\n            # current_url = pg_response.get_current_url()\n            # self.logger.info(f\"URL after proceed to pay: {current_url}\")\n            #\n            # with allure.step(\"Validating the Base URL\"):\n            #     assert validate_base_url(current_url,\n            #                              excel_environment), f\"Base URL validation failed for {current_url}\"\n    \n    \n    \n    \n    \n        except Exception as e:\n            self.logger.exception(\n                f\"Exception occurred during Cancel Transaction Test for {excel_client_code}: {str(e)}\")\n            allure.attach(str(e), name=\"Exception Details\", attachment_type=allure.attachment_type.TEXT)\n            raise\n    \n        finally:\n            # Update Excel with results\n>           update_excel_results(\n                scenario=scenario,\n                payment_mode=payment_mode,\n                slab=slab,\n                request_amount=amount,\n                actual_bill=bill_amount,\n                conv_charges=conv_charges,\n                total_amount=total_amount,\n                status=status,\n                txn_id=txn_id\n            )\n\ntestCases\\Calculation_test.py:259: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutilites\\calculation_excel_helper.py:15: in update_excel_results\n    df = pd.read_excel(file_path)\n.venv\\Lib\\site-packages\\pandas\\io\\excel\\_base.py:495: in read_excel\n    io = ExcelFile(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pandas.io.excel._base.ExcelFile object at 0x0000014B8F544F50>\npath_or_buffer = 'TestData/Calculation_Testing_Report.xlsx', engine = None\nstorage_options = None, engine_kwargs = {}\n\n    def __init__(\n        self,\n        path_or_buffer,\n        engine: str | None = None,\n        storage_options: StorageOptions | None = None,\n        engine_kwargs: dict | None = None,\n    ) -> None:\n        if engine_kwargs is None:\n            engine_kwargs = {}\n    \n        if engine is not None and engine not in self._engines:\n            raise ValueError(f\"Unknown engine: {engine}\")\n    \n        # First argument can also be bytes, so create a buffer\n        if isinstance(path_or_buffer, bytes):\n            path_or_buffer = BytesIO(path_or_buffer)\n            warnings.warn(\n                \"Passing bytes to 'read_excel' is deprecated and \"\n                \"will be removed in a future version. To read from a \"\n                \"byte string, wrap it in a `BytesIO` object.\",\n                FutureWarning,\n                stacklevel=find_stack_level(),\n            )\n    \n        # Could be a str, ExcelFile, Book, etc.\n        self.io = path_or_buffer\n        # Always a string\n        self._io = stringify_path(path_or_buffer)\n    \n        # Determine xlrd version if installed\n        if import_optional_dependency(\"xlrd\", errors=\"ignore\") is None:\n            xlrd_version = None\n        else:\n            import xlrd\n    \n            xlrd_version = Version(get_version(xlrd))\n    \n        if engine is None:\n            # Only determine ext if it is needed\n            ext: str | None\n            if xlrd_version is not None and isinstance(path_or_buffer, xlrd.Book):\n                ext = \"xls\"\n            else:\n                ext = inspect_excel_format(\n                    content_or_path=path_or_buffer, storage_options=storage_options\n                )\n                if ext is None:\n>                   raise ValueError(\n                        \"Excel file format cannot be determined, you must specify \"\n                        \"an engine manually.\"\n                    )\nE                   ValueError: Excel file format cannot be determined, you must specify an engine manually.\n\n.venv\\Lib\\site-packages\\pandas\\io\\excel\\_base.py:1554: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"attach_test_timestamp","time":{"start":1758800404575,"stop":1758800404578,"duration":3},"status":"passed","steps":[],"attachments":[{"uid":"c5e5e982c666bebd","name":"Test Execution Timestamp","source":"c5e5e982c666bebd.txt","type":"text/plain","size":19}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"browser","time":{"start":1758800404579,"stop":1758800421291,"duration":16712},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"page","time":{"start":1758800421292,"stop":1758800434539,"duration":13247},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"page_with_screenshot","time":{"start":1758800434539,"stop":1758800434539,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"ensure_db_updated","time":{"start":1758800434542,"stop":1758800442784,"duration":8242},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"ValueError: Excel file format cannot be determined, you must specify an engine manually.","statusTrace":"self = <testCases.Calculation_test.TestCalculations object at 0x0000014B8F094320>\npage_with_screenshot = <Page url='https://stage-securepay.sabpaisa.in/SabPaisa/sabPaisaInit?v=1'>\nscenario = 'S18', payment_mode = 'RuPay Credit Card', slab = '1-1000'\namount = 100, excel_client_code = 'DJ050', excel_environment = 'STAGING'\nensure_db_updated = None\n\n    @allure.story(\"Cancel Transaction Button Check\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.ui\n    @pytest.mark.regression\n    def test_calculation_amount(self, page_with_screenshot, scenario, payment_mode, slab, amount, excel_client_code,\n                                excel_environment, ensure_db_updated):\n        logger = LogGen.loggen(\"Calculation\")\n        \"\"\"Test the cancel transaction button functionality.\"\"\"\n        timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n        allure.dynamic.title(\n            f\"Calculation Testing | Scenario={scenario} | Mode={payment_mode} | Slab={slab} | Amount={amount}\"\n        )\n        logger.info(f\"--- Starting calculation Test for {scenario} | {payment_mode} | {slab} | {amount} ---\")\n    \n        bill_amount = conv_charges = total_amount = txn_id = \"N/A\"\n        status = \"Fail\"\n    \n        try:\n            if payment_mode == \"UPI INTENT\":\n                viewport_size = {\"width\": 375, \"height\": 667}  # Example: iPhone-like dimensions\n                page_with_screenshot.set_viewport_size(viewport_size)\n                logger.info(\n                    f\"Set viewport size to {viewport_size['width']}x{viewport_size['height']} for UPI INTENT mode\")\n                allure.attach(page_with_screenshot.screenshot(), name=\"UPI Intent Initial Viewport\",\n                              attachment_type=allure.attachment_type.PNG)\n    \n    \n            # Initialize page objects\n            client = ClientPage(page_with_screenshot)\n            client_details = ClientDetailsPage(page_with_screenshot)\n            pg = PaymentGatewayPage(page_with_screenshot)\n            pg_response = PaymentGatewayResponsePage(page_with_screenshot)\n    \n            # Fill and verify client and payer details\n            fill_and_verify_client_details(self.logger, client, client_details, excel_client_code, excel_environment)\n            fill_payer_details(\n                logger, client_details, ReadConfig.get_payer_first_name(),\n                ReadConfig.get_payer_last_name(), str(amount), ReadConfig.get_payer_phone(),\n                ReadConfig.get_payer_email()\n            )\n    \n            # Get transaction ID\n            with allure.step(f\"Accessing the Client_txn_id\"):\n                txn_id = client_details.get_value(\"_client_transaction_id\")\n                allure.attach(txn_id, name=f\"Client Transaction ID for {excel_client_code}\",\n                              attachment_type=allure.attachment_type.TEXT)\n    \n            # Click Pay button\n            with allure.step(\"Clicking Pay Button\"):\n                logger.info(\"Clicking Pay button\")\n                client_details.click(\"_pay_btn\")\n    \n            time.sleep(5)\n    \n            # Handle payment mode and get amounts\n            bill_amount, conv_charges, total_amount = self._handle_payment_mode(pg, payment_mode, logger)\n    \n    \n            #time.sleep(10)\n    \n            # Handle failure for specific scenario and slab\n            # if scenario in [\"S8\", \"S13\", \"S16\", \"S24\", \"S21\"] and slab == \"5001-10000\":\n            #     status = \"Fail\"\n            #     with allure.step(\"transaction is aborted for scenario and slab\"):\n            #         allure.attach(\n            #             f\"Scenario={scenario}, Slab={slab} is restricted → marking as Fail\",\n            #             name=\"Failure\",\n            #             attachment_type=allure.attachment_type.TEXT\n            #         )\n            #     pytest.fail(f\"Scenario={scenario}, Slab={slab} →  test as failed \")\n    \n            # \uD83D\uDD39 Call the Payment Aborted check here\n            status = self._check_payment_aborted(page_with_screenshot)\n    \n    \n    \n            # # Wait for page to load and validate URL\n            # time.sleep(5)\n            # pg_response.page.wait_for_load_state(\"networkidle\")\n            # current_url = pg_response.get_current_url()\n            # self.logger.info(f\"URL after proceed to pay: {current_url}\")\n            #\n            # with allure.step(\"Validating the Base URL\"):\n            #     assert validate_base_url(current_url,\n            #                              excel_environment), f\"Base URL validation failed for {current_url}\"\n    \n    \n    \n    \n    \n        except Exception as e:\n            self.logger.exception(\n                f\"Exception occurred during Cancel Transaction Test for {excel_client_code}: {str(e)}\")\n            allure.attach(str(e), name=\"Exception Details\", attachment_type=allure.attachment_type.TEXT)\n            raise\n    \n        finally:\n            # Update Excel with results\n>           update_excel_results(\n                scenario=scenario,\n                payment_mode=payment_mode,\n                slab=slab,\n                request_amount=amount,\n                actual_bill=bill_amount,\n                conv_charges=conv_charges,\n                total_amount=total_amount,\n                status=status,\n                txn_id=txn_id\n            )\n\ntestCases\\Calculation_test.py:259: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutilites\\calculation_excel_helper.py:15: in update_excel_results\n    df = pd.read_excel(file_path)\n.venv\\Lib\\site-packages\\pandas\\io\\excel\\_base.py:495: in read_excel\n    io = ExcelFile(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pandas.io.excel._base.ExcelFile object at 0x0000014B8F544F50>\npath_or_buffer = 'TestData/Calculation_Testing_Report.xlsx', engine = None\nstorage_options = None, engine_kwargs = {}\n\n    def __init__(\n        self,\n        path_or_buffer,\n        engine: str | None = None,\n        storage_options: StorageOptions | None = None,\n        engine_kwargs: dict | None = None,\n    ) -> None:\n        if engine_kwargs is None:\n            engine_kwargs = {}\n    \n        if engine is not None and engine not in self._engines:\n            raise ValueError(f\"Unknown engine: {engine}\")\n    \n        # First argument can also be bytes, so create a buffer\n        if isinstance(path_or_buffer, bytes):\n            path_or_buffer = BytesIO(path_or_buffer)\n            warnings.warn(\n                \"Passing bytes to 'read_excel' is deprecated and \"\n                \"will be removed in a future version. To read from a \"\n                \"byte string, wrap it in a `BytesIO` object.\",\n                FutureWarning,\n                stacklevel=find_stack_level(),\n            )\n    \n        # Could be a str, ExcelFile, Book, etc.\n        self.io = path_or_buffer\n        # Always a string\n        self._io = stringify_path(path_or_buffer)\n    \n        # Determine xlrd version if installed\n        if import_optional_dependency(\"xlrd\", errors=\"ignore\") is None:\n            xlrd_version = None\n        else:\n            import xlrd\n    \n            xlrd_version = Version(get_version(xlrd))\n    \n        if engine is None:\n            # Only determine ext if it is needed\n            ext: str | None\n            if xlrd_version is not None and isinstance(path_or_buffer, xlrd.Book):\n                ext = \"xls\"\n            else:\n                ext = inspect_excel_format(\n                    content_or_path=path_or_buffer, storage_options=storage_options\n                )\n                if ext is None:\n>                   raise ValueError(\n                        \"Excel file format cannot be determined, you must specify \"\n                        \"an engine manually.\"\n                    )\nE                   ValueError: Excel file format cannot be determined, you must specify an engine manually.\n\n.venv\\Lib\\site-packages\\pandas\\io\\excel\\_base.py:1554: ValueError","steps":[{"name":"Filling and verifying client details","time":{"start":1758800443763,"stop":1758800445185,"duration":1422},"status":"passed","steps":[{"name":"Filling Client Code : DJ050","time":{"start":1758800443763,"stop":1758800444051,"duration":288},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Selecting Environment : STAGING","time":{"start":1758800444051,"stop":1758800444232,"duration":181},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Clicking Show Detail","time":{"start":1758800444232,"stop":1758800445055,"duration":823},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Verifying if Payer Name is visible","time":{"start":1758800445055,"stop":1758800445185,"duration":130},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"logger","value":"<RootLogger root (DEBUG)>"},{"name":"client","value":"<pageObjects.client_page.ClientPage object at 0x0000014B8EF90830>"},{"name":"client_details","value":"<pageObjects.client_details_page.ClientDetailsPage object at 0x0000014B8F4D5FD0>"},{"name":"client_code","value":"'DJ050'"},{"name":"environment","value":"'STAGING'"}],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":4,"hasContent":true,"attachmentStep":false},{"name":"Filling payer details","time":{"start":1758800445185,"stop":1758800445652,"duration":467},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"logger","value":"<RootLogger root (DEBUG)>"},{"name":"client_details","value":"<pageObjects.client_details_page.ClientDetailsPage object at 0x0000014B8F4D5FD0>"},{"name":"firstname","value":"'Bhargava'"},{"name":"lastname","value":"'Battina'"},{"name":"amount","value":"'100'"},{"name":"mobilenumber","value":"'1234567890'"},{"name":"email","value":"'test@sabpaisa.in'"}],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Accessing the Client_txn_id","time":{"start":1758800445652,"stop":1758800445936,"duration":284},"status":"passed","steps":[],"attachments":[{"uid":"471c4079cdc8da8b","name":"Client Transaction ID for DJ050","source":"471c4079cdc8da8b.txt","type":"text/plain","size":21}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Clicking Pay Button","time":{"start":1758800445936,"stop":1758800446346,"duration":410},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Payment Aborted message not found → Test Passed","time":{"start":1758800469956,"stop":1758800471471,"duration":1515},"status":"passed","steps":[],"attachments":[{"uid":"2e091fe0b3455fc1","name":"Success Reason","source":"2e091fe0b3455fc1.txt","type":"text/plain","size":35}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":2,"stepsCount":9,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"ensure_db_updated::0","time":{"start":1758800473239,"stop":1758800473239,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"page_with_screenshot::0","time":{"start":1758800494680,"stop":1758800525220,"duration":30540},"status":"passed","steps":[],"attachments":[{"uid":"80a11281b2661f8","name":"Screenshot","source":"80a11281b2661f8.png","type":"image/png","size":75724},{"uid":"2d102b132e2ce94f","name":"Test Video","source":"2d102b132e2ce94f.webm","type":"video/webm","size":786432}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":2,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"page::0","time":{"start":1758800525294,"stop":1758800525294,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"browser::0","time":{"start":1758800525408,"stop":1758800525755,"duration":347},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"severity","value":"critical"},{"name":"story","value":"Cancel Transaction Button Check"},{"name":"epic","value":"Payment Gateway"},{"name":"tag","value":"regression"},{"name":"tag","value":"ui"},{"name":"parentSuite","value":"testCases"},{"name":"suite","value":"Calculation_test"},{"name":"subSuite","value":"TestCalculations"},{"name":"host","value":"SRS-CL-009"},{"name":"thread","value":"76628-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testCases.Calculation_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"amount","value":"100"},{"name":"excel_client_code","value":"'DJ050'"},{"name":"excel_environment","value":"'STAGING'"},{"name":"payment_mode","value":"'RuPay Credit Card'"},{"name":"scenario","value":"'S18'"},{"name":"slab","value":"'1-1000'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["ui","regression"]},"source":"4eff8cbc1bee742d.json","parameterValues":["100","'DJ050'","'STAGING'","'RuPay Credit Card'","'S18'","'1-1000'"]}
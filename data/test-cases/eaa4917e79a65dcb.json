{"uid":"eaa4917e79a65dcb","name":"Calculation Testing | Scenario=S18 | Mode=Net Banking | Slab=1-1000 | Amount=100","fullName":"testCases.Calculation_test.TestCalculations#test_calculation_amount","historyId":"b2396edbb0dddb9eee048f2b72b5bb18","time":{"start":1758800448454,"stop":1758800510116,"duration":61662},"status":"broken","statusMessage":"playwright._impl._errors.TimeoutError: Locator.wait_for: Timeout 30000ms exceeded.\nCall log:\nwaiting for locator(\"p.title\").first to be visible","statusTrace":"self = <testCases.Calculation_test.TestCalculations object at 0x000001CF0E8E2670>\npage_with_screenshot = <Page url='https://stage-securepay.sabpaisa.in/SabPaisa/sabPaisaInit?v=1'>\nscenario = 'S18', payment_mode = 'Net Banking', slab = '1-1000', amount = 100\nexcel_client_code = 'DJ050', excel_environment = 'STAGING'\nensure_db_updated = None\n\n    @allure.story(\"Cancel Transaction Button Check\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.ui\n    @pytest.mark.regression\n    def test_calculation_amount(self, page_with_screenshot, scenario, payment_mode, slab, amount, excel_client_code,\n                                excel_environment, ensure_db_updated):\n        logger = LogGen.loggen(\"Calculation\")\n        \"\"\"Test the cancel transaction button functionality.\"\"\"\n        timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n        allure.dynamic.title(\n            f\"Calculation Testing | Scenario={scenario} | Mode={payment_mode} | Slab={slab} | Amount={amount}\"\n        )\n        logger.info(f\"--- Starting calculation Test for {scenario} | {payment_mode} | {slab} | {amount} ---\")\n    \n        bill_amount = conv_charges = total_amount = txn_id = \"N/A\"\n        status = \"Fail\"\n    \n        try:\n            if payment_mode == \"UPI INTENT\":\n                viewport_size = {\"width\": 375, \"height\": 667}  # Example: iPhone-like dimensions\n                page_with_screenshot.set_viewport_size(viewport_size)\n                logger.info(\n                    f\"Set viewport size to {viewport_size['width']}x{viewport_size['height']} for UPI INTENT mode\")\n                allure.attach(page_with_screenshot.screenshot(), name=\"UPI Intent Initial Viewport\",\n                              attachment_type=allure.attachment_type.PNG)\n    \n    \n            # Initialize page objects\n            client = ClientPage(page_with_screenshot)\n            client_details = ClientDetailsPage(page_with_screenshot)\n            pg = PaymentGatewayPage(page_with_screenshot)\n            pg_response = PaymentGatewayResponsePage(page_with_screenshot)\n    \n            # Fill and verify client and payer details\n            fill_and_verify_client_details(self.logger, client, client_details, excel_client_code, excel_environment)\n            fill_payer_details(\n                logger, client_details, ReadConfig.get_payer_first_name(),\n                ReadConfig.get_payer_last_name(), str(amount), ReadConfig.get_payer_phone(),\n                ReadConfig.get_payer_email()\n            )\n    \n            # Get transaction ID\n            with allure.step(f\"Accessing the Client_txn_id\"):\n                txn_id = client_details.get_value(\"_client_transaction_id\")\n                allure.attach(txn_id, name=f\"Client Transaction ID for {excel_client_code}\",\n                              attachment_type=allure.attachment_type.TEXT)\n    \n            # Click Pay button\n            with allure.step(\"Clicking Pay Button\"):\n                logger.info(\"Clicking Pay button\")\n                client_details.click(\"_pay_btn\")\n    \n            time.sleep(5)\n    \n            # Handle payment mode and get amounts\n>           bill_amount, conv_charges, total_amount = self._handle_payment_mode(pg, payment_mode, logger)\n\ntestCases\\Calculation_test.py:216: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntestCases\\Calculation_test.py:59: in _handle_payment_mode\n    pg.select_payment_mode(\"_payment_mode\", pm_data[\"type\"])\npageObjects\\base_page.py:52: in select_payment_mode\n    modes.first.wait_for(state=\"visible\")\n.venv\\Lib\\site-packages\\playwright\\sync_api\\_generated.py:17736: in wait_for\n    self._sync(self._impl_obj.wait_for(timeout=timeout, state=state))\n.venv\\Lib\\site-packages\\playwright\\_impl\\_locator.py:670: in wait_for\n    await self._frame.wait_for_selector(\n.venv\\Lib\\site-packages\\playwright\\_impl\\_frame.py:323: in wait_for_selector\n    await self._channel.send(\"waitForSelector\", locals_to_params(locals()))\n.venv\\Lib\\site-packages\\playwright\\_impl\\_connection.py:59: in send\n    return await self._connection.wrap_api_call(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <playwright._impl._connection.Connection object at 0x000001CF0E843B60>\ncb = <function Channel.send.<locals>.<lambda> at 0x000001CF0EA50A40>\nis_internal = False\n\n    async def wrap_api_call(\n        self, cb: Callable[[], Any], is_internal: bool = False\n    ) -> Any:\n        if self._api_zone.get():\n            return await cb()\n        task = asyncio.current_task(self._loop)\n        st: List[inspect.FrameInfo] = getattr(task, \"__pw_stack__\", inspect.stack())\n        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal)\n        self._api_zone.set(parsed_st)\n        try:\n            return await cb()\n        except Exception as error:\n>           raise rewrite_error(error, f\"{parsed_st['apiName']}: {error}\") from None\nE           playwright._impl._errors.TimeoutError: Locator.wait_for: Timeout 30000ms exceeded.\nE           Call log:\nE           waiting for locator(\"p.title\").first to be visible\n\n.venv\\Lib\\site-packages\\playwright\\_impl\\_connection.py:520: TimeoutError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"attach_test_timestamp","time":{"start":1758800404583,"stop":1758800404597,"duration":14},"status":"passed","steps":[],"attachments":[{"uid":"3c12c333c0ead1a5","name":"Test Execution Timestamp","source":"3c12c333c0ead1a5.txt","type":"text/plain","size":19}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"browser","time":{"start":1758800404598,"stop":1758800421345,"duration":16747},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"page","time":{"start":1758800421346,"stop":1758800437006,"duration":15660},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"page_with_screenshot","time":{"start":1758800437006,"stop":1758800437006,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"ensure_db_updated","time":{"start":1758800437007,"stop":1758800448452,"duration":11445},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"playwright._impl._errors.TimeoutError: Locator.wait_for: Timeout 30000ms exceeded.\nCall log:\nwaiting for locator(\"p.title\").first to be visible","statusTrace":"self = <testCases.Calculation_test.TestCalculations object at 0x000001CF0E8E2670>\npage_with_screenshot = <Page url='https://stage-securepay.sabpaisa.in/SabPaisa/sabPaisaInit?v=1'>\nscenario = 'S18', payment_mode = 'Net Banking', slab = '1-1000', amount = 100\nexcel_client_code = 'DJ050', excel_environment = 'STAGING'\nensure_db_updated = None\n\n    @allure.story(\"Cancel Transaction Button Check\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.ui\n    @pytest.mark.regression\n    def test_calculation_amount(self, page_with_screenshot, scenario, payment_mode, slab, amount, excel_client_code,\n                                excel_environment, ensure_db_updated):\n        logger = LogGen.loggen(\"Calculation\")\n        \"\"\"Test the cancel transaction button functionality.\"\"\"\n        timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n        allure.dynamic.title(\n            f\"Calculation Testing | Scenario={scenario} | Mode={payment_mode} | Slab={slab} | Amount={amount}\"\n        )\n        logger.info(f\"--- Starting calculation Test for {scenario} | {payment_mode} | {slab} | {amount} ---\")\n    \n        bill_amount = conv_charges = total_amount = txn_id = \"N/A\"\n        status = \"Fail\"\n    \n        try:\n            if payment_mode == \"UPI INTENT\":\n                viewport_size = {\"width\": 375, \"height\": 667}  # Example: iPhone-like dimensions\n                page_with_screenshot.set_viewport_size(viewport_size)\n                logger.info(\n                    f\"Set viewport size to {viewport_size['width']}x{viewport_size['height']} for UPI INTENT mode\")\n                allure.attach(page_with_screenshot.screenshot(), name=\"UPI Intent Initial Viewport\",\n                              attachment_type=allure.attachment_type.PNG)\n    \n    \n            # Initialize page objects\n            client = ClientPage(page_with_screenshot)\n            client_details = ClientDetailsPage(page_with_screenshot)\n            pg = PaymentGatewayPage(page_with_screenshot)\n            pg_response = PaymentGatewayResponsePage(page_with_screenshot)\n    \n            # Fill and verify client and payer details\n            fill_and_verify_client_details(self.logger, client, client_details, excel_client_code, excel_environment)\n            fill_payer_details(\n                logger, client_details, ReadConfig.get_payer_first_name(),\n                ReadConfig.get_payer_last_name(), str(amount), ReadConfig.get_payer_phone(),\n                ReadConfig.get_payer_email()\n            )\n    \n            # Get transaction ID\n            with allure.step(f\"Accessing the Client_txn_id\"):\n                txn_id = client_details.get_value(\"_client_transaction_id\")\n                allure.attach(txn_id, name=f\"Client Transaction ID for {excel_client_code}\",\n                              attachment_type=allure.attachment_type.TEXT)\n    \n            # Click Pay button\n            with allure.step(\"Clicking Pay Button\"):\n                logger.info(\"Clicking Pay button\")\n                client_details.click(\"_pay_btn\")\n    \n            time.sleep(5)\n    \n            # Handle payment mode and get amounts\n>           bill_amount, conv_charges, total_amount = self._handle_payment_mode(pg, payment_mode, logger)\n\ntestCases\\Calculation_test.py:216: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntestCases\\Calculation_test.py:59: in _handle_payment_mode\n    pg.select_payment_mode(\"_payment_mode\", pm_data[\"type\"])\npageObjects\\base_page.py:52: in select_payment_mode\n    modes.first.wait_for(state=\"visible\")\n.venv\\Lib\\site-packages\\playwright\\sync_api\\_generated.py:17736: in wait_for\n    self._sync(self._impl_obj.wait_for(timeout=timeout, state=state))\n.venv\\Lib\\site-packages\\playwright\\_impl\\_locator.py:670: in wait_for\n    await self._frame.wait_for_selector(\n.venv\\Lib\\site-packages\\playwright\\_impl\\_frame.py:323: in wait_for_selector\n    await self._channel.send(\"waitForSelector\", locals_to_params(locals()))\n.venv\\Lib\\site-packages\\playwright\\_impl\\_connection.py:59: in send\n    return await self._connection.wrap_api_call(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <playwright._impl._connection.Connection object at 0x000001CF0E843B60>\ncb = <function Channel.send.<locals>.<lambda> at 0x000001CF0EA50A40>\nis_internal = False\n\n    async def wrap_api_call(\n        self, cb: Callable[[], Any], is_internal: bool = False\n    ) -> Any:\n        if self._api_zone.get():\n            return await cb()\n        task = asyncio.current_task(self._loop)\n        st: List[inspect.FrameInfo] = getattr(task, \"__pw_stack__\", inspect.stack())\n        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal)\n        self._api_zone.set(parsed_st)\n        try:\n            return await cb()\n        except Exception as error:\n>           raise rewrite_error(error, f\"{parsed_st['apiName']}: {error}\") from None\nE           playwright._impl._errors.TimeoutError: Locator.wait_for: Timeout 30000ms exceeded.\nE           Call log:\nE           waiting for locator(\"p.title\").first to be visible\n\n.venv\\Lib\\site-packages\\playwright\\_impl\\_connection.py:520: TimeoutError","steps":[{"name":"Filling and verifying client details","time":{"start":1758800448533,"stop":1758800457337,"duration":8804},"status":"passed","steps":[{"name":"Filling Client Code : DJ050","time":{"start":1758800448533,"stop":1758800452084,"duration":3551},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Selecting Environment : STAGING","time":{"start":1758800452084,"stop":1758800452340,"duration":256},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Clicking Show Detail","time":{"start":1758800452340,"stop":1758800456009,"duration":3669},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Verifying if Payer Name is visible","time":{"start":1758800456009,"stop":1758800457337,"duration":1328},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"logger","value":"<RootLogger root (DEBUG)>"},{"name":"client","value":"<pageObjects.client_page.ClientPage object at 0x000001CF0E840830>"},{"name":"client_details","value":"<pageObjects.client_details_page.ClientDetailsPage object at 0x000001CF0ED85FD0>"},{"name":"client_code","value":"'DJ050'"},{"name":"environment","value":"'STAGING'"}],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":4,"hasContent":true,"attachmentStep":false},{"name":"Filling payer details","time":{"start":1758800457337,"stop":1758800458250,"duration":913},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"logger","value":"<RootLogger root (DEBUG)>"},{"name":"client_details","value":"<pageObjects.client_details_page.ClientDetailsPage object at 0x000001CF0ED85FD0>"},{"name":"firstname","value":"'Bhargava'"},{"name":"lastname","value":"'Battina'"},{"name":"amount","value":"'100'"},{"name":"mobilenumber","value":"'1234567890'"},{"name":"email","value":"'test@sabpaisa.in'"}],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Accessing the Client_txn_id","time":{"start":1758800458250,"stop":1758800461144,"duration":2894},"status":"passed","steps":[],"attachments":[{"uid":"1c204d21ea3f297e","name":"Client Transaction ID for DJ050","source":"1c204d21ea3f297e.txt","type":"text/plain","size":22}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Clicking Pay Button","time":{"start":1758800461144,"stop":1758800461637,"duration":493},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[{"uid":"7f23b87a36782115","name":"Exception Details","source":"7f23b87a36782115.txt","type":"text/plain","size":105}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":2,"stepsCount":8,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"ensure_db_updated::0","time":{"start":1758800511547,"stop":1758800511547,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"page_with_screenshot::0","time":{"start":1758800511972,"stop":1758800529016,"duration":17044},"status":"passed","steps":[],"attachments":[{"uid":"30a1b4f4f4591e5c","name":"Screenshot","source":"30a1b4f4f4591e5c.png","type":"image/png","size":78874},{"uid":"745ca2d7df542df8","name":"Test Video","source":"745ca2d7df542df8.webm","type":"video/webm","size":524288}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":2,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"page::0","time":{"start":1758800529021,"stop":1758800529021,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"browser::0","time":{"start":1758800529075,"stop":1758800529588,"duration":513},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"story","value":"Cancel Transaction Button Check"},{"name":"severity","value":"critical"},{"name":"epic","value":"Payment Gateway"},{"name":"tag","value":"regression"},{"name":"tag","value":"ui"},{"name":"parentSuite","value":"testCases"},{"name":"suite","value":"Calculation_test"},{"name":"subSuite","value":"TestCalculations"},{"name":"host","value":"SRS-CL-009"},{"name":"thread","value":"81588-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testCases.Calculation_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"amount","value":"100"},{"name":"excel_client_code","value":"'DJ050'"},{"name":"excel_environment","value":"'STAGING'"},{"name":"payment_mode","value":"'Net Banking'"},{"name":"scenario","value":"'S18'"},{"name":"slab","value":"'1-1000'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["ui","regression"]},"source":"eaa4917e79a65dcb.json","parameterValues":["100","'DJ050'","'STAGING'","'Net Banking'","'S18'","'1-1000'"]}